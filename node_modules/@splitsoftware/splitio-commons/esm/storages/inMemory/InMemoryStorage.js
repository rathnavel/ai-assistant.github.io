import { SplitsCacheInMemory } from './SplitsCacheInMemory';
import { SegmentsCacheInMemory } from './SegmentsCacheInMemory';
import { ImpressionsCacheInMemory } from './ImpressionsCacheInMemory';
import { EventsCacheInMemory } from './EventsCacheInMemory';
import { ImpressionCountsCacheInMemory } from './ImpressionCountsCacheInMemory';
import { DEBUG, LOCALHOST_MODE, NONE, STORAGE_MEMORY } from '../../utils/constants';
import { shouldRecordTelemetry, TelemetryCacheInMemory } from './TelemetryCacheInMemory';
import { UniqueKeysCacheInMemory } from './UniqueKeysCacheInMemory';
/**
 * InMemory storage factory for standalone server-side SplitFactory
 *
 * @param params parameters required by EventsCacheSync
 */
export function InMemoryStorageFactory(params) {
    var _a = params.settings, _b = _a.scheduler, impressionsQueueSize = _b.impressionsQueueSize, eventsQueueSize = _b.eventsQueueSize, _c = _a.sync, impressionsMode = _c.impressionsMode, __splitFiltersValidation = _c.__splitFiltersValidation;
    var splits = new SplitsCacheInMemory(__splitFiltersValidation);
    var segments = new SegmentsCacheInMemory();
    var storage = {
        splits: splits,
        segments: segments,
        impressions: new ImpressionsCacheInMemory(impressionsQueueSize),
        impressionCounts: impressionsMode !== DEBUG ? new ImpressionCountsCacheInMemory() : undefined,
        events: new EventsCacheInMemory(eventsQueueSize),
        telemetry: shouldRecordTelemetry(params) ? new TelemetryCacheInMemory(splits, segments) : undefined,
        uniqueKeys: impressionsMode === NONE ? new UniqueKeysCacheInMemory() : undefined,
        // When using MEMORY we should clean all the caches to leave them empty
        destroy: function () {
            this.splits.clear();
            this.segments.clear();
            this.impressions.clear();
            this.impressionCounts && this.impressionCounts.clear();
            this.events.clear();
            this.uniqueKeys && this.uniqueKeys.clear();
        }
    };
    // @TODO revisit storage logic in localhost mode
    // No tracking data in localhost mode to avoid memory leaks
    if (params.settings.mode === LOCALHOST_MODE) {
        var noopTrack = function () { return true; };
        storage.impressions.track = noopTrack;
        storage.events.track = noopTrack;
        if (storage.impressionCounts)
            storage.impressionCounts.track = noopTrack;
        if (storage.uniqueKeys)
            storage.uniqueKeys.track = noopTrack;
    }
    return storage;
}
InMemoryStorageFactory.type = STORAGE_MEMORY;
