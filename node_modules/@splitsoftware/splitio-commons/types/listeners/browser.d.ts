import { ISignalListener } from './types';
import { IStorageSync } from '../storages/types';
import { ISplitApi } from '../services/types';
import { ISettings } from '../types';
import { ISyncManager } from '../sync/types';
/**
 * We'll listen for events over the window object.
 */
export declare class BrowserSignalListener implements ISignalListener {
    private syncManager;
    private settings;
    private storage;
    private serviceApi;
    private fromImpressionsCollector;
    constructor(syncManager: ISyncManager | undefined, settings: ISettings, storage: IStorageSync, serviceApi: ISplitApi);
    /**
     * start method.
     * Called when SplitFactory is initialized, it adds event listeners to close streaming and flush impressions and events.
     */
    start(): void;
    /**
     * stop method.
     * Called when client is destroyed, it removes event listeners.
     */
    stop(): void;
    /**
     * flushData method.
     * Called when pagehide event is triggered. It flushed remaining impressions and events to the backend,
     * using beacon API if possible, or falling back to regular post transport.
     */
    flushData(): void;
    flushDataIfHidden(): void;
    private _flushData;
    /**
     * _sendBeacon method.
     * Util method that check if beacon API is available, build the payload and send it.
     * Returns true if beacon API was used successfully, false otherwise.
     */
    private _sendBeacon;
}
