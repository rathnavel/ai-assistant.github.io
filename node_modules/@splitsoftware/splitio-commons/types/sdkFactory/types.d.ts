import { IIntegrationManager, IIntegrationFactoryParams } from '../integrations/types';
import { ISignalListener } from '../listeners/types';
import { IReadinessManager, ISdkReadinessManager } from '../readiness/types';
import type { sdkManagerFactory } from '../sdkManager';
import type { splitApiFactory } from '../services/splitApi';
import { IFetch, ISplitApi, IEventSourceConstructor } from '../services/types';
import { IStorageAsync, IStorageSync, IStorageFactoryParams } from '../storages/types';
import { ISyncManager } from '../sync/types';
import { IImpressionObserver } from '../trackers/impressionObserver/types';
import { IImpressionsTracker, IEventTracker, ITelemetryTracker, IFilterAdapter, IUniqueKeysTracker } from '../trackers/types';
import { SplitIO, ISettings, IEventEmitter } from '../types';
/**
 * Environment related dependencies.
 */
export interface IPlatform {
    /**
     * If provided, it is used to retrieve the Fetch API for HTTP requests. Otherwise, the global fetch is used.
     */
    getFetch?: (settings: ISettings) => (IFetch | undefined);
    /**
     * If provided, it is used to pass additional options to fetch and eventsource calls.
     */
    getOptions?: (settings: ISettings) => object;
    /**
     * If provided, it is used to retrieve the EventSource constructor for streaming support.
     */
    getEventSource?: (settings: ISettings) => (IEventSourceConstructor | undefined);
    /**
     * EventEmitter constructor, like NodeJS.EventEmitter or a polyfill.
     */
    EventEmitter: new () => IEventEmitter;
    /**
     * Function used to track latencies for telemetry.
     */
    now?: () => number;
}
export interface ISdkFactoryContext {
    platform: IPlatform;
    sdkReadinessManager: ISdkReadinessManager;
    readiness: IReadinessManager;
    settings: ISettings;
    impressionsTracker: IImpressionsTracker;
    eventTracker: IEventTracker;
    telemetryTracker: ITelemetryTracker;
    storage: IStorageSync | IStorageAsync;
    uniqueKeysTracker?: IUniqueKeysTracker;
    signalListener?: ISignalListener;
    splitApi?: ISplitApi;
    syncManager?: ISyncManager;
}
export interface ISdkFactoryContextSync extends ISdkFactoryContext {
    storage: IStorageSync;
    splitApi: ISplitApi;
    syncManager: ISyncManager;
}
export interface ISdkFactoryContextAsync extends ISdkFactoryContext {
    storage: IStorageAsync;
    splitApi: undefined;
    syncManager: undefined;
}
/**
 * Object parameter with the modules required to create an SDK factory instance
 */
export interface ISdkFactoryParams {
    settings: ISettings;
    platform: IPlatform;
    storageFactory: (params: IStorageFactoryParams) => IStorageSync | IStorageAsync;
    splitApiFactory?: typeof splitApiFactory;
    syncManagerFactory?: (params: ISdkFactoryContextSync) => ISyncManager;
    sdkManagerFactory: typeof sdkManagerFactory;
    sdkClientMethodFactory: (params: ISdkFactoryContext) => ({
        (): SplitIO.ICsClient;
        (key: SplitIO.SplitKey, trafficType?: string | undefined): SplitIO.ICsClient;
    } | (() => SplitIO.IClient) | (() => SplitIO.IAsyncClient));
    impressionsObserverFactory: () => IImpressionObserver;
    filterAdapterFactory?: () => IFilterAdapter;
    SignalListener?: new (syncManager: ISyncManager | undefined, // Used by NodeSignalListener to flush data, and by BrowserSignalListener to close streaming connection.
    settings: ISettings, // Used by BrowserSignalListener
    storage: IStorageSync | IStorageAsync, // Used by BrowserSignalListener
    serviceApi: ISplitApi | undefined) => ISignalListener;
    integrationsManagerFactory?: (params: IIntegrationFactoryParams) => IIntegrationManager | undefined;
    extraProps?: (params: ISdkFactoryContext) => object;
}
