import { IPlatform } from '../../../sdkFactory/types';
import { IEventSourceConstructor } from '../../../services/types';
import { ISettings } from '../../../types';
import { IAuthTokenPushEnabled } from '../AuthClient/types';
import { ISSEClient, ISseEventHandler } from './types';
/**
 * Handles streaming connections with EventSource API
 */
export declare class SSEClient implements ISSEClient {
    private settings;
    eventSource?: IEventSourceConstructor;
    connection?: InstanceType<IEventSourceConstructor>;
    handler?: ISseEventHandler;
    headers: Record<string, string>;
    options?: object;
    /**
     * SSEClient constructor.
     *
     * @param settings Validated settings.
     * @param platform object containing environment-specific dependencies
     * @throws 'EventSource API is not available.' if EventSource is not available.
     */
    constructor(settings: ISettings, { getEventSource, getOptions }: IPlatform);
    setEventHandler(handler: ISseEventHandler): void;
    /**
     * Open the connection with a given authToken
     *
     * @param {IAuthTokenPushEnabled} authToken
     * @throws {TypeError} Will throw an error if `authToken` is undefined
     */
    open(authToken: IAuthTokenPushEnabled): void;
    /** Close connection  */
    close(): void;
}
