import { ISplit, ISplitFiltersValidation } from '../../dtos/types';
import { AbstractSplitsCacheSync } from '../AbstractSplitsCacheSync';
import { ISet } from '../../utils/lang/sets';
/**
 * Default ISplitsCacheSync implementation that stores split definitions in memory.
 * Supported by all JS runtimes.
 */
export declare class SplitsCacheInMemory extends AbstractSplitsCacheSync {
    private flagSetsFilter;
    private splitsCache;
    private ttCache;
    private changeNumber;
    private splitsWithSegmentsCount;
    private flagSetsCache;
    constructor(splitFiltersValidation?: ISplitFiltersValidation);
    clear(): void;
    addSplit(name: string, split: ISplit): boolean;
    removeSplit(name: string): boolean;
    getSplit(name: string): ISplit | null;
    setChangeNumber(changeNumber: number): boolean;
    getChangeNumber(): number;
    getSplitNames(): string[];
    trafficTypeExists(trafficType: string): boolean;
    usesSegments(): boolean;
    getNamesByFlagSets(flagSets: string[]): ISet<string>[];
    private addToFlagSets;
    private removeFromFlagSets;
    private removeNames;
}
