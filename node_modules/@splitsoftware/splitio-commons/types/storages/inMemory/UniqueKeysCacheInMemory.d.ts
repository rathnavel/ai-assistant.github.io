import { IUniqueKeysCacheBase } from '../types';
import { ISet } from '../../utils/lang/sets';
import { UniqueKeysPayloadSs } from '../../sync/submitters/types';
/**
 * Converts `uniqueKeys` data from cache into request payload for SS.
 */
export declare function fromUniqueKeysCollector(uniqueKeys: {
    [featureName: string]: ISet<string>;
}): UniqueKeysPayloadSs;
export declare class UniqueKeysCacheInMemory implements IUniqueKeysCacheBase {
    protected onFullQueue?: () => void;
    private readonly maxStorage;
    private uniqueTrackerSize;
    protected uniqueKeysTracker: {
        [featureName: string]: ISet<string>;
    };
    constructor(uniqueKeysQueueSize?: number);
    setOnFullQueueCb(cb: () => void): void;
    /**
     * Store unique keys per feature.
     */
    track(userKey: string, featureName: string): void;
    /**
     * Clear the data stored on the cache.
     */
    clear(): void;
    /**
     * Pop the collected data, used as payload for posting.
     */
    pop(): UniqueKeysPayloadSs;
    /**
     * Check if the cache is empty.
     */
    isEmpty(): boolean;
}
