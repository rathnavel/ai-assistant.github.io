import { IUniqueKeysCacheBase } from '../types';
import { UniqueKeysPayloadCs } from '../../sync/submitters/types';
export declare class UniqueKeysCacheInMemoryCS implements IUniqueKeysCacheBase {
    private onFullQueue?;
    private readonly maxStorage;
    private uniqueTrackerSize;
    private uniqueKeysTracker;
    /**
     *
     * @param impressionsQueueSize number of queued impressions to call onFullQueueCb.
     * Default value is 0, that means no maximum value, in case we want to avoid this being triggered.
     */
    constructor(uniqueKeysQueueSize?: number);
    setOnFullQueueCb(cb: () => void): void;
    /**
     * Store unique keys per feature.
     */
    track(userKey: string, featureName: string): void;
    /**
     * Clear the data stored on the cache.
     */
    clear(): void;
    /**
     * Pop the collected data, used as payload for posting.
     */
    pop(): UniqueKeysPayloadCs;
    /**
     * Check if the cache is empty.
     */
    isEmpty(): boolean;
    /**
     * Converts `uniqueKeys` data from cache into request payload.
     */
    private fromUniqueKeysCollector;
}
