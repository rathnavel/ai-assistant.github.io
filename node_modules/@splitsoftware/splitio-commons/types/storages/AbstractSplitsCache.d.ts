import { ISplit, MaybeThenable } from '../dtos/types';
/**
 * This class provides a skeletal implementation of the ISplitsCacheAsync interface
 * to minimize the effort required to implement this interface.
 */
export declare abstract class AbstractSplitsCache {
    /**
     * Check if the splits information is already stored in cache. This data can be preloaded.
     * It is used as condition to emit SDK_SPLITS_CACHE_LOADED, and then SDK_READY_FROM_CACHE.
     */
    checkCache(): boolean;
    protected abstract addSplit(name: string, split: ISplit): MaybeThenable<boolean>;
    /**
     * Add a list of splits.
     * The returned promise is resolved when the operation success or rejected if it fails (e.g., wrapper operation fails).
     */
    protected addSplits(entries: [string, ISplit][]): Promise<boolean[]>;
    protected abstract removeSplit(name: string): MaybeThenable<boolean>;
    /**
     * Remove a list of splits.
     * The returned promise is resolved when the operation success, with a boolean array indicating if the splits existed or not.
     * or rejected if it fails (e.g., wrapper operation fails).
     */
    protected removeSplits(names: string[]): Promise<boolean[]>;
    protected abstract setChangeNumber(changeNumber: number): MaybeThenable<boolean | void>;
    /**
     * Updates the cache with the provided changeNumber, feature flags to add and feature flags to remove.
     *
     * @returns {Promise<boolean>} a promise that resolved once the operation is performed successfully. The fulfillment value is `true` if at least one feature flag was added, modified or removed; or `false` if there was no change.
     * The promise will reject if some storage operation rejects.
     */
    update(changeNumber: number, toAdd: [string, ISplit][], toRemove?: string[]): Promise<boolean>;
    abstract getSplit(name: string): MaybeThenable<ISplit | null>;
    /**
     * Kill `name` split and set `defaultTreatment` and `changeNumber`.
     * Used for SPLIT_KILL push notifications.
     *
     * @param {string} name
     * @param {string} defaultTreatment
     * @param {number} changeNumber
     * @returns {Promise} a promise that is resolved once the split kill operation is performed. The fulfillment value is a boolean: `true` if the operation successed updating the split or `false` if no split is updated,
     * for instance, if the `changeNumber` is old, or if the split is not found (e.g., `/splitchanges` hasn't been fetched yet), or if the storage fails to apply the update.
     * The promise will never be rejected.
     */
    killLocally(name: string, defaultTreatment: string, changeNumber: number): Promise<boolean>;
}
