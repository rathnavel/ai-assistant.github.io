/// <reference types="ioredis" />
import { IUniqueKeysCacheBase } from '../types';
import { UniqueKeysCacheInMemory } from '../inMemory/UniqueKeysCacheInMemory';
import { ILogger } from '../../logger/types';
import { UniqueKeysItemSs } from '../../sync/submitters/types';
import type { RedisAdapter } from './RedisAdapter';
export declare class UniqueKeysCacheInRedis extends UniqueKeysCacheInMemory implements IUniqueKeysCacheBase {
    private readonly log;
    private readonly key;
    private readonly redis;
    private readonly refreshRate;
    private intervalId;
    constructor(log: ILogger, key: string, redis: RedisAdapter, uniqueKeysQueueSize?: number, refreshRate?: number);
    private postUniqueKeysInRedis;
    start(): void;
    stop(): Promise<boolean | import("ioredis").BooleanResponse | undefined>;
    /**
     * Async consumer API, used by synchronizer.
     * @param count number of items to pop from the queue. If not provided or equal 0, all items will be popped.
     */
    popNRaw(count?: number): Promise<UniqueKeysItemSs[]>;
}
