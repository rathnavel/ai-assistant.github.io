{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nexport const fetchCDSData = createAsyncThunk(\"cdsapi/fetchData\", async ({\n  apiBaseEndpoint,\n  orgId,\n  aniId,\n  accessToken\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.get(`${apiBaseEndpoint}cds-api/summary?orgId=${orgId}&aniId=${aniId}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    });\n    console.log(\"Response from CDS API\", response.data);\n    let timeStamp = response.data.interactionDateTime;\n    let summaryResponse = JSON.parse(response.data.summary);\n    let res = {\n      summary: summaryResponse,\n      interactionDateTime: timeStamp\n    };\n    return res;\n  } catch (error) {\n    console.error(\"Failed to fetch data\", error);\n    return rejectWithValue({\n      message: error instanceof Error ? error.message : \"Unknown error\"\n    });\n  }\n});\n\n//#region  Slice\n\nconst initialState = {\n  cdsData: null,\n  loading: false,\n  error: null\n};\nexport const CDSAPISlice = createSlice({\n  name: \"cdsapi\",\n  initialState,\n  reducers: {\n    // Define reducers if needed\n    removeCDSData: state => {\n      state.cdsData = null;\n      state.loading = false;\n      state.error = null;\n    },\n    addCDSData: (state, action) => {\n      console.log(\"Adding CDS Data\", action.payload);\n      state.cdsData = action.payload;\n      state.loading = false;\n      state.error = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchCDSData.pending, state => {\n      state.loading = true;\n      state.error = null;\n    });\n    builder.addCase(fetchCDSData.fulfilled, (state, action) => {\n      state.cdsData = action.payload;\n      state.loading = false;\n    });\n    builder.addCase(fetchCDSData.rejected, (state, action) => {\n      var _action$payload$messa, _action$payload;\n      state.error = (_action$payload$messa = (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.message) !== null && _action$payload$messa !== void 0 ? _action$payload$messa : \"Failed to fetch data\";\n      state.loading = false;\n    });\n  }\n});\nexport const {\n  addCDSData,\n  removeCDSData\n} = CDSAPISlice.actions;\nexport default CDSAPISlice.reducer;\n//#endregion","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","fetchCDSData","apiBaseEndpoint","orgId","aniId","accessToken","rejectWithValue","response","get","headers","Authorization","console","log","data","timeStamp","interactionDateTime","summaryResponse","JSON","parse","summary","res","error","message","Error","initialState","cdsData","loading","CDSAPISlice","name","reducers","removeCDSData","state","addCDSData","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","_action$payload$messa","_action$payload","actions","reducer"],"sources":["/Users/ratbalas/Documents/Projects/temp/ai-assistant.github.io/src/APIIntegrations/CDSData.ts"],"sourcesContent":["import { PayloadAction, createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { CDSResponse, ApiError } from \"./types\";\nimport axios from \"axios\";\n\nexport const fetchCDSData = createAsyncThunk<\n  CDSResponse,\n  {\n    apiBaseEndpoint: string;\n    orgId: string;\n    aniId: string;\n    accessToken: string;\n  },\n  { rejectValue: ApiError }\n>(\n  \"cdsapi/fetchData\",\n  async (\n    { apiBaseEndpoint, orgId, aniId, accessToken },\n    { rejectWithValue }\n  ) => {\n    try {\n      const response = await axios.get(\n        `${apiBaseEndpoint}cds-api/summary?orgId=${orgId}&aniId=${aniId}`,\n        {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        }\n      );\n      console.log(\"Response from CDS API\", response.data);\n\n      let timeStamp = response.data.interactionDateTime;\n      let summaryResponse = JSON.parse(response.data.summary);\n      let res: CDSResponse = {\n        summary: summaryResponse,\n        interactionDateTime: timeStamp,\n      };\n      return res;\n    } catch (error) {\n      console.error(\"Failed to fetch data\", error);\n      return rejectWithValue({\n        message: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  }\n);\n\n//#region  Slice\n\ninterface YourApiState {\n  cdsData: CDSResponse | null;\n  loading: boolean;\n  error: string | null;\n}\n\nconst initialState: YourApiState = {\n  cdsData: null,\n  loading: false,\n  error: null,\n};\n\nexport const CDSAPISlice = createSlice({\n  name: \"cdsapi\",\n  initialState,\n  reducers: {\n    // Define reducers if needed\n    removeCDSData: (state) => {\n      state.cdsData = null;\n      state.loading = false;\n      state.error = null;\n    },\n    addCDSData: (state, action: PayloadAction<CDSResponse>) => {\n      console.log(\"Adding CDS Data\", action.payload);\n      state.cdsData = action.payload;\n      state.loading = false;\n      state.error = null;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchCDSData.pending, (state) => {\n      state.loading = true;\n      state.error = null;\n    });\n    builder.addCase(fetchCDSData.fulfilled, (state, action) => {\n      state.cdsData = action.payload;\n      state.loading = false;\n    });\n    builder.addCase(fetchCDSData.rejected, (state, action) => {\n      state.error = action.payload?.message ?? \"Failed to fetch data\";\n      state.loading = false;\n    });\n  },\n});\n\nexport const { addCDSData, removeCDSData } = CDSAPISlice.actions;\nexport default CDSAPISlice.reducer;\n//#endregion\n"],"mappings":"AAAA,SAAwBA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAE/E,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,YAAY,GAAGH,gBAAgB,CAU1C,kBAAkB,EAClB,OACE;EAAEI,eAAe;EAAEC,KAAK;EAAEC,KAAK;EAAEC;AAAY,CAAC,EAC9C;EAAEC;AAAgB,CAAC,KAChB;EACH,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAC9B,GAAGN,eAAe,yBAAyBC,KAAK,UAAUC,KAAK,EAAE,EACjE;MACEK,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUL,WAAW;MACtC;IACF,CACF,CAAC;IACDM,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEL,QAAQ,CAACM,IAAI,CAAC;IAEnD,IAAIC,SAAS,GAAGP,QAAQ,CAACM,IAAI,CAACE,mBAAmB;IACjD,IAAIC,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACX,QAAQ,CAACM,IAAI,CAACM,OAAO,CAAC;IACvD,IAAIC,GAAgB,GAAG;MACrBD,OAAO,EAAEH,eAAe;MACxBD,mBAAmB,EAAED;IACvB,CAAC;IACD,OAAOM,GAAG;EACZ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdV,OAAO,CAACU,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAOf,eAAe,CAAC;MACrBgB,OAAO,EAAED,KAAK,YAAYE,KAAK,GAAGF,KAAK,CAACC,OAAO,GAAG;IACpD,CAAC,CAAC;EACJ;AACF,CACF,CAAC;;AAED;;AAQA,MAAME,YAA0B,GAAG;EACjCC,OAAO,EAAE,IAAI;EACbC,OAAO,EAAE,KAAK;EACdL,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMM,WAAW,GAAG5B,WAAW,CAAC;EACrC6B,IAAI,EAAE,QAAQ;EACdJ,YAAY;EACZK,QAAQ,EAAE;IACR;IACAC,aAAa,EAAGC,KAAK,IAAK;MACxBA,KAAK,CAACN,OAAO,GAAG,IAAI;MACpBM,KAAK,CAACL,OAAO,GAAG,KAAK;MACrBK,KAAK,CAACV,KAAK,GAAG,IAAI;IACpB,CAAC;IACDW,UAAU,EAAEA,CAACD,KAAK,EAAEE,MAAkC,KAAK;MACzDtB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEqB,MAAM,CAACC,OAAO,CAAC;MAC9CH,KAAK,CAACN,OAAO,GAAGQ,MAAM,CAACC,OAAO;MAC9BH,KAAK,CAACL,OAAO,GAAG,KAAK;MACrBK,KAAK,CAACV,KAAK,GAAG,IAAI;IACpB;EACF,CAAC;EACDc,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAACpC,YAAY,CAACqC,OAAO,EAAGP,KAAK,IAAK;MAC/CA,KAAK,CAACL,OAAO,GAAG,IAAI;MACpBK,KAAK,CAACV,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC;IACFe,OAAO,CAACC,OAAO,CAACpC,YAAY,CAACsC,SAAS,EAAE,CAACR,KAAK,EAAEE,MAAM,KAAK;MACzDF,KAAK,CAACN,OAAO,GAAGQ,MAAM,CAACC,OAAO;MAC9BH,KAAK,CAACL,OAAO,GAAG,KAAK;IACvB,CAAC,CAAC;IACFU,OAAO,CAACC,OAAO,CAACpC,YAAY,CAACuC,QAAQ,EAAE,CAACT,KAAK,EAAEE,MAAM,KAAK;MAAA,IAAAQ,qBAAA,EAAAC,eAAA;MACxDX,KAAK,CAACV,KAAK,IAAAoB,qBAAA,IAAAC,eAAA,GAAGT,MAAM,CAACC,OAAO,cAAAQ,eAAA,uBAAdA,eAAA,CAAgBpB,OAAO,cAAAmB,qBAAA,cAAAA,qBAAA,GAAI,sBAAsB;MAC/DV,KAAK,CAACL,OAAO,GAAG,KAAK;IACvB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEM,UAAU;EAAEF;AAAc,CAAC,GAAGH,WAAW,CAACgB,OAAO;AAChE,eAAehB,WAAW,CAACiB,OAAO;AAClC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}