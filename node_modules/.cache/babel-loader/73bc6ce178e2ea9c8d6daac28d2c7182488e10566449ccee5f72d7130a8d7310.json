{"ast":null,"code":"import{createSlice}from\"@reduxjs/toolkit\";// Define the state interface\n// Initial state\nconst initialState={wellnessBreakData:[],loading:false};// Create the slice\nexport const WellnessBreakSlice=createSlice({name:\"wellnessbreak\",initialState,reducers:{// Action to remove wellness break data\nremoveWellnessBreakData:state=>{console.log(\"Removing wellness break data from store\");state.wellnessBreakData=[];state.loading=false;},// Action to add wellness break data\naddWellnessBreakData:(state,action)=>{console.log(\"Adding wellness break data to store\",action.payload);state.wellnessBreakData.push(action.payload);state.loading=false;},// Action to update wellness break data\nupdateWellnessBreakDataActionable:(state,action)=>{console.log(\"Updating wellness break data in store\",action.payload);const index=state.wellnessBreakData.findIndex(item=>item.interactionDateTime===action.payload.interactionDateTime);if(index!==-1){state.wellnessBreakData[index]={...state.wellnessBreakData[index],content:{...state.wellnessBreakData[index].content,actionable:action.payload.content.actionable,response:action.payload.content.response,agentEngaged:action.payload.content.agentEngaged,error:action.payload.content.error}};}state.loading=false;}}});// Export actions and reducer\nexport const{addWellnessBreakData,removeWellnessBreakData,updateWellnessBreakDataActionable}=WellnessBreakSlice.actions;export default WellnessBreakSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","wellnessBreakData","loading","WellnessBreakSlice","name","reducers","removeWellnessBreakData","state","console","log","addWellnessBreakData","action","payload","push","updateWellnessBreakDataActionable","index","findIndex","item","interactionDateTime","content","actionable","response","agentEngaged","error","actions","reducer"],"sources":["/Users/ratbalas/Documents/Projects/temp/ai-assistant.github.io/src/APIIntegrations/WellnessBreaks.ts"],"sourcesContent":["import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { WellnessBreak } from \"./types\";\n\n// Define the state interface\ninterface WellnessBreakState {\n  wellnessBreakData: WellnessBreak[];\n  loading: boolean;\n}\n\n// Initial state\nconst initialState: WellnessBreakState = {\n  wellnessBreakData: [],\n  loading: false\n};\n\n// Create the slice\nexport const WellnessBreakSlice = createSlice({\n  name: \"wellnessbreak\",\n  initialState,\n  reducers: {\n    // Action to remove wellness break data\n    removeWellnessBreakData: (state: WellnessBreakState): void => {\n      console.log(\"Removing wellness break data from store\");\n      state.wellnessBreakData = [];\n      state.loading = false;\n    },\n    // Action to add wellness break data\n    addWellnessBreakData: (state: WellnessBreakState, action: PayloadAction<WellnessBreak>): void => {\n      console.log(\"Adding wellness break data to store\", action.payload);\n      state.wellnessBreakData.push(action.payload);\n      state.loading = false;\n    },\n    // Action to update wellness break data\n    updateWellnessBreakDataActionable: (state: WellnessBreakState, action: PayloadAction<WellnessBreak>): void => {\n      console.log(\"Updating wellness break data in store\", action.payload);\n      const index = state.wellnessBreakData.findIndex((item) => item.interactionDateTime === action.payload.interactionDateTime);\n      if (index !== -1) {\n        state.wellnessBreakData[index] = {\n          ...state.wellnessBreakData[index],\n          content: {\n            ...state.wellnessBreakData[index].content,\n            actionable: action.payload.content.actionable,\n            response: action.payload.content.response,\n            agentEngaged: action.payload.content.agentEngaged,\n            error: action.payload.content.error\n          }\n        };\n      }\n      state.loading = false;\n    }\n  }\n});\n\n// Export actions and reducer\nexport const { addWellnessBreakData, removeWellnessBreakData, updateWellnessBreakDataActionable } = WellnessBreakSlice.actions;\nexport default WellnessBreakSlice.reducer;\n\n"],"mappings":"AAAA,OAAwBA,WAAW,KAAQ,kBAAkB,CAG7D;AAMA;AACA,KAAM,CAAAC,YAAgC,CAAG,CACvCC,iBAAiB,CAAE,EAAE,CACrBC,OAAO,CAAE,KACX,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,kBAAkB,CAAGJ,WAAW,CAAC,CAC5CK,IAAI,CAAE,eAAe,CACrBJ,YAAY,CACZK,QAAQ,CAAE,CACR;AACAC,uBAAuB,CAAGC,KAAyB,EAAW,CAC5DC,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC,CACtDF,KAAK,CAACN,iBAAiB,CAAG,EAAE,CAC5BM,KAAK,CAACL,OAAO,CAAG,KAAK,CACvB,CAAC,CACD;AACAQ,oBAAoB,CAAEA,CAACH,KAAyB,CAAEI,MAAoC,GAAW,CAC/FH,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAEE,MAAM,CAACC,OAAO,CAAC,CAClEL,KAAK,CAACN,iBAAiB,CAACY,IAAI,CAACF,MAAM,CAACC,OAAO,CAAC,CAC5CL,KAAK,CAACL,OAAO,CAAG,KAAK,CACvB,CAAC,CACD;AACAY,iCAAiC,CAAEA,CAACP,KAAyB,CAAEI,MAAoC,GAAW,CAC5GH,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAEE,MAAM,CAACC,OAAO,CAAC,CACpE,KAAM,CAAAG,KAAK,CAAGR,KAAK,CAACN,iBAAiB,CAACe,SAAS,CAAEC,IAAI,EAAKA,IAAI,CAACC,mBAAmB,GAAKP,MAAM,CAACC,OAAO,CAACM,mBAAmB,CAAC,CAC1H,GAAIH,KAAK,GAAK,CAAC,CAAC,CAAE,CAChBR,KAAK,CAACN,iBAAiB,CAACc,KAAK,CAAC,CAAG,CAC/B,GAAGR,KAAK,CAACN,iBAAiB,CAACc,KAAK,CAAC,CACjCI,OAAO,CAAE,CACP,GAAGZ,KAAK,CAACN,iBAAiB,CAACc,KAAK,CAAC,CAACI,OAAO,CACzCC,UAAU,CAAET,MAAM,CAACC,OAAO,CAACO,OAAO,CAACC,UAAU,CAC7CC,QAAQ,CAAEV,MAAM,CAACC,OAAO,CAACO,OAAO,CAACE,QAAQ,CACzCC,YAAY,CAAEX,MAAM,CAACC,OAAO,CAACO,OAAO,CAACG,YAAY,CACjDC,KAAK,CAAEZ,MAAM,CAACC,OAAO,CAACO,OAAO,CAACI,KAChC,CACF,CAAC,CACH,CACAhB,KAAK,CAACL,OAAO,CAAG,KAAK,CACvB,CACF,CACF,CAAC,CAAC,CAEF;AACA,MAAO,MAAM,CAAEQ,oBAAoB,CAAEJ,uBAAuB,CAAEQ,iCAAkC,CAAC,CAAGX,kBAAkB,CAACqB,OAAO,CAC9H,cAAe,CAAArB,kBAAkB,CAACsB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}