{"ast":null,"code":"import{AiInsightClient}from\"../proto/serving_grpc_web_pb.js\";import{InsightsServingRequest}from\"../proto/serving_pb.js\";/**\n * gRPC Channel creation and fetch response\n * @param {String} url\n * @param {String} bearerAuthToken\n * @param {String} activeCallId\n * @param {String} orgId\n */export async function fetchGrpcData(url,authToken,activeCallId,orgId){console.log(`Creating channel for conversationId: ${activeCallId}`);const bearerAuthToken=\"Bearer \"+authToken;const client=new AiInsightClient(url,null,null);const insightsServingRequest=new InsightsServingRequest();insightsServingRequest.setConversationid(activeCallId);insightsServingRequest.setMessageid(\"virtual-agent-call-summary\");insightsServingRequest.setInsighttype(5);insightsServingRequest.setOrgid(orgId);console.log(\"Insightrequest\",insightsServingRequest);const request=insightsServingRequest.toObject(true);console.log(\"Insightrequest\",request);console.log(\"Bearer token\",bearerAuthToken);try{const response=await new Promise((resolve,reject)=>{client.insightServing(insightsServingRequest,{authorization:bearerAuthToken},(err,response)=>{if(err){reject(err instanceof Error?err:new Error(err.toString()));}else{resolve(response);}});});console.log(\"Response:\",response);const insightServingResponse=response;const responseObj=insightServingResponse.toObject(true);let content=getContent(responseObj);let res={summary:content,interactionDateTime:getTimeStamp(responseObj),error:null};console.log(\"Response from grpc - \",content);return res;}catch(err){console.log(\"Error in creating grpc connection\",err);let res={summary:null,interactionDateTime:\"\",error:err.message};return res;}}export const getContent=data=>{console.log(\"VAH data from grpc \",data);let responseList=data[\"responsecontentList\"];let callinsightsresult=responseList[0][\"callinsightsresult\"];let content=callinsightsresult[\"content\"];let content_parse=JSON.parse(content);console.log(\"VAH content parse \",content_parse);return content_parse;};export const getTimeStamp=data=>{let responseList=data[\"starttimestamp\"];let dateTime=new Date(responseList).toString();console.log(\"VAH dateTime  \",dateTime);return dateTime;};","map":{"version":3,"names":["AiInsightClient","InsightsServingRequest","fetchGrpcData","url","authToken","activeCallId","orgId","console","log","bearerAuthToken","client","insightsServingRequest","setConversationid","setMessageid","setInsighttype","setOrgid","request","toObject","response","Promise","resolve","reject","insightServing","authorization","err","Error","toString","insightServingResponse","responseObj","content","getContent","res","summary","interactionDateTime","getTimeStamp","error","message","data","responseList","callinsightsresult","content_parse","JSON","parse","dateTime","Date"],"sources":["/Users/ratbalas/Documents/Projects/temp/ai-assistant.github.io/src/gRPCClient/index.ts"],"sourcesContent":["import { AiInsightClient } from \"../proto/serving_grpc_web_pb.js\";\nimport { InsightsServingRequest, InsightServingResponse } from \"../proto/serving_pb.js\";\nimport { VASResponse } from \"../APIIntegrations/types\";\n\n/**\n * gRPC Channel creation and fetch response\n * @param {String} url\n * @param {String} bearerAuthToken\n * @param {String} activeCallId\n * @param {String} orgId\n */\n\nexport async function fetchGrpcData(url: string, authToken: string, activeCallId: string, orgId: string): Promise<VASResponse> {\n  console.log(`Creating channel for conversationId: ${activeCallId}`);\n  const bearerAuthToken = \"Bearer \" + authToken;\n  const client = new AiInsightClient(url, null, null);\n  const insightsServingRequest = new InsightsServingRequest();\n\n  insightsServingRequest.setConversationid(activeCallId);\n  insightsServingRequest.setMessageid(\"virtual-agent-call-summary\");\n  insightsServingRequest.setInsighttype(5);\n  insightsServingRequest.setOrgid(orgId);\n\n  console.log(\"Insightrequest\", insightsServingRequest);\n  const request = insightsServingRequest.toObject(true);\n  console.log(\"Insightrequest\", request);\n  console.log(\"Bearer token\", bearerAuthToken);\n\n  try {\n    const response = await new Promise<InsightServingResponse>((resolve, reject) => {\n      client.insightServing(insightsServingRequest, { authorization: bearerAuthToken }, (err, response) => {\n        if (err) {\n          reject(err instanceof Error ? err : new Error(err.toString()));\n        } else {\n          resolve(response);\n        }\n      });\n    });\n\n    console.log(\"Response:\", response);\n    const insightServingResponse = response;\n    const responseObj = insightServingResponse.toObject(true);\n    let content = getContent(responseObj);\n    let res: VASResponse = {\n      summary: content,\n      interactionDateTime: getTimeStamp(responseObj),\n      error: null\n    };\n    console.log(\"Response from grpc - \", content);\n    return res;\n  } catch (err: any) {\n    console.log(\"Error in creating grpc connection\", err);\n    let res: VASResponse = {\n      summary: null,\n      interactionDateTime: \"\",\n      error: err.message\n    };\n    return res;\n  }\n}\nexport const getContent = (data: any) => {\n  console.log(\"VAH data from grpc \", data);\n  let responseList = data[\"responsecontentList\"];\n  let callinsightsresult = responseList[0][\"callinsightsresult\"];\n  let content = callinsightsresult[\"content\"];\n  let content_parse = JSON.parse(content);\n  console.log(\"VAH content parse \", content_parse);\n\n  return content_parse;\n};\n\nexport const getTimeStamp = (data: any) => {\n  let responseList = data[\"starttimestamp\"];\n  let dateTime = new Date(responseList).toString();\n  console.log(\"VAH dateTime  \", dateTime);\n  return dateTime;\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}