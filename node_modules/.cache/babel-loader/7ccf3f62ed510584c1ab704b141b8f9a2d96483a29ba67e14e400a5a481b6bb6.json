{"ast":null,"code":"var _jsxFileName = \"/Users/ratbalas/Documents/Projects/temp/ai-assistant.github.io/src/components/VirtualAssistant/index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchVASData } from \"../../APIIntegrations/VASummary\";\nimport { setAccessToken, setEventHandlerUrl } from \"../../Utils/SessionVariables\";\nimport EnvironmentComponent from \"../../Utils/ResolveEnvironment\";\nimport AssistantPanel from \"../AssistantPanel/AssistantPanel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VirtualAssistant = props => {\n  _s();\n  const apiBaseURL = useRef(\"\");\n  const servingURL = useRef(\"\");\n  const websocketRegisterUrl = useRef(\"\");\n\n  // #region Redux Store\n  const dispatch = useDispatch(); // Get the dispatch function from the Redux store\n  //#endregion\n\n  const handleCreateGRPCChannel = useCallback(() => {\n    const host = servingURL.current; // The URL for the gRPC service\n    const authToken = props.accessToken;\n    const orgId = props.orgId;\n    const interactionId = props.interactionId;\n    console.info(\"Started Fetching VAH Data\", host, interactionId, orgId, authToken);\n    // Dispatch the thunk action to fetch the VAH data\n    dispatch(fetchVASData({\n      host,\n      authToken,\n      interactionId,\n      orgId\n    }));\n  }, [dispatch, props.accessToken, props.orgId, props.interactionId]);\n\n  //#region Desktop Integration\n  const RequestSummary = () => {\n    console.info(\"Requesting the VA Summary., Interaction ID: \", props.interactionId);\n\n    // if interaction id present get vah data\n    if (props.interactionId && props.interactionId !== null) {\n      handleCreateGRPCChannel();\n    } else {\n      console.info(\"Requesting the VA Summary is stopped, due to empty Interaction ID\");\n    }\n  };\n  const init = splitKey => {\n    //#region Feature Flag Check\n    console.info(\"Skipping Initializing/Validating the Split IO SDK\");\n    RequestSummary();\n    return true;\n  };\n  useEffect(() => {\n    console.info(\"Starts here ..\");\n    //resolve the environment\n    const envValues = EnvironmentComponent(props.env);\n    if (envValues.apiBaseEndpoint !== \"\") {\n      apiBaseURL.current = envValues.apiBaseEndpoint;\n      servingURL.current = envValues.servingUrl;\n      websocketRegisterUrl.current = envValues.notifsDataRegistrationUrl;\n      console.info(\"API Base url \", apiBaseURL.current);\n      dispatch(setAccessToken(props.accessToken));\n      dispatch(setEventHandlerUrl(envValues.eventHandlerUrl));\n      setTimeout(() => {\n        console.info(\"Start the Initializing Split IO SDK\");\n        init(envValues.splitKeyToken);\n      }, 1000);\n    }\n  }, [props.accessToken, props.orgId, props.interactionId, props.env]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"virtual-assistance-summary\",\n    children: /*#__PURE__*/_jsxDEV(AssistantPanel, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 7\n  }, this);\n};\n_s(VirtualAssistant, \"88yx096+P/gDJ9jiv1b5gdUfd8I=\", false, function () {\n  return [useDispatch];\n});\n_c = VirtualAssistant;\nexport default VirtualAssistant;\nvar _c;\n$RefreshReg$(_c, \"VirtualAssistant\");","map":{"version":3,"names":["React","useCallback","useEffect","useRef","useDispatch","fetchVASData","setAccessToken","setEventHandlerUrl","EnvironmentComponent","AssistantPanel","jsxDEV","_jsxDEV","VirtualAssistant","props","_s","apiBaseURL","servingURL","websocketRegisterUrl","dispatch","handleCreateGRPCChannel","host","current","authToken","accessToken","orgId","interactionId","console","info","RequestSummary","init","splitKey","envValues","env","apiBaseEndpoint","servingUrl","notifsDataRegistrationUrl","eventHandlerUrl","setTimeout","splitKeyToken","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ratbalas/Documents/Projects/temp/ai-assistant.github.io/src/components/VirtualAssistant/index.tsx"],"sourcesContent":["import React, { FC, useCallback, useEffect, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchVASData } from \"../../APIIntegrations/VASummary\";\nimport { setAccessToken, setEventHandlerUrl } from \"../../Utils/SessionVariables\";\nimport EnvironmentComponent from \"../../Utils/ResolveEnvironment\";\nimport AssistantPanel from \"../AssistantPanel/AssistantPanel\";\n\ninterface IProps {\n  env: string;\n  orgId: string;\n  accessToken: string;\n  interactionId: string;\n}\n\nconst VirtualAssistant: FC<IProps> = (props) => {\n  const apiBaseURL = useRef<string>(\"\");\n  const servingURL = useRef<string>(\"\");\n  const websocketRegisterUrl = useRef<string>(\"\");\n\n  // #region Redux Store\n  const dispatch = useDispatch(); // Get the dispatch function from the Redux store\n  //#endregion\n\n\n  const handleCreateGRPCChannel = useCallback(() => {\n    const host = servingURL.current; // The URL for the gRPC service\n    const authToken = props.accessToken;\n    const orgId = props.orgId;\n    const interactionId = props.interactionId;\n    console.info(\"Started Fetching VAH Data\", host, interactionId, orgId, authToken);\n    // Dispatch the thunk action to fetch the VAH data\n    dispatch(fetchVASData({ host, authToken, interactionId, orgId }));\n  }, [dispatch, props.accessToken, props.orgId, props.interactionId]);\n\n  //#region Desktop Integration\n  const RequestSummary = (): any => {\n    console.info(\"Requesting the VA Summary., Interaction ID: \", props.interactionId);\n\n    // if interaction id present get vah data\n    if (props.interactionId && props.interactionId !== null) {\n      handleCreateGRPCChannel();\n    } else {\n      console.info(\"Requesting the VA Summary is stopped, due to empty Interaction ID\");\n    }\n  };\n\n  const init = (splitKey: string) => {\n    //#region Feature Flag Check\n    console.info(\"Skipping Initializing/Validating the Split IO SDK\");\n    RequestSummary();\n    return true;\n  };\n\n  useEffect(() => {\n    console.info(\"Starts here ..\");\n    //resolve the environment\n    const envValues = EnvironmentComponent(props.env);\n\n    if (envValues.apiBaseEndpoint !== \"\") {\n      apiBaseURL.current = envValues.apiBaseEndpoint;\n      servingURL.current = envValues.servingUrl;\n      websocketRegisterUrl.current = envValues.notifsDataRegistrationUrl;\n\n      console.info(\"API Base url \", apiBaseURL.current);\n      dispatch(setAccessToken(props.accessToken));\n      dispatch(setEventHandlerUrl(envValues.eventHandlerUrl));\n\n      setTimeout(() => {\n        console.info(\"Start the Initializing Split IO SDK\");\n        init(envValues.splitKeyToken);\n      }, 1000);\n    }\n  }, [props.accessToken, props.orgId, props.interactionId, props.env]);\n\n  return (\n      <div className=\"virtual-assistance-summary\">\n        <AssistantPanel />\n      </div>\n  );\n};\n\nexport default VirtualAssistant;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAQC,WAAW,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACjE,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,YAAY,QAAQ,iCAAiC;AAC9D,SAASC,cAAc,EAAEC,kBAAkB,QAAQ,8BAA8B;AACjF,OAAOC,oBAAoB,MAAM,gCAAgC;AACjE,OAAOC,cAAc,MAAM,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS9D,MAAMC,gBAA4B,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC9C,MAAMC,UAAU,GAAGZ,MAAM,CAAS,EAAE,CAAC;EACrC,MAAMa,UAAU,GAAGb,MAAM,CAAS,EAAE,CAAC;EACrC,MAAMc,oBAAoB,GAAGd,MAAM,CAAS,EAAE,CAAC;;EAE/C;EACA,MAAMe,QAAQ,GAAGd,WAAW,CAAC,CAAC,CAAC,CAAC;EAChC;;EAGA,MAAMe,uBAAuB,GAAGlB,WAAW,CAAC,MAAM;IAChD,MAAMmB,IAAI,GAAGJ,UAAU,CAACK,OAAO,CAAC,CAAC;IACjC,MAAMC,SAAS,GAAGT,KAAK,CAACU,WAAW;IACnC,MAAMC,KAAK,GAAGX,KAAK,CAACW,KAAK;IACzB,MAAMC,aAAa,GAAGZ,KAAK,CAACY,aAAa;IACzCC,OAAO,CAACC,IAAI,CAAC,2BAA2B,EAAEP,IAAI,EAAEK,aAAa,EAAED,KAAK,EAAEF,SAAS,CAAC;IAChF;IACAJ,QAAQ,CAACb,YAAY,CAAC;MAAEe,IAAI;MAAEE,SAAS;MAAEG,aAAa;MAAED;IAAM,CAAC,CAAC,CAAC;EACnE,CAAC,EAAE,CAACN,QAAQ,EAAEL,KAAK,CAACU,WAAW,EAAEV,KAAK,CAACW,KAAK,EAAEX,KAAK,CAACY,aAAa,CAAC,CAAC;;EAEnE;EACA,MAAMG,cAAc,GAAGA,CAAA,KAAW;IAChCF,OAAO,CAACC,IAAI,CAAC,8CAA8C,EAAEd,KAAK,CAACY,aAAa,CAAC;;IAEjF;IACA,IAAIZ,KAAK,CAACY,aAAa,IAAIZ,KAAK,CAACY,aAAa,KAAK,IAAI,EAAE;MACvDN,uBAAuB,CAAC,CAAC;IAC3B,CAAC,MAAM;MACLO,OAAO,CAACC,IAAI,CAAC,mEAAmE,CAAC;IACnF;EACF,CAAC;EAED,MAAME,IAAI,GAAIC,QAAgB,IAAK;IACjC;IACAJ,OAAO,CAACC,IAAI,CAAC,mDAAmD,CAAC;IACjEC,cAAc,CAAC,CAAC;IAChB,OAAO,IAAI;EACb,CAAC;EAED1B,SAAS,CAAC,MAAM;IACdwB,OAAO,CAACC,IAAI,CAAC,gBAAgB,CAAC;IAC9B;IACA,MAAMI,SAAS,GAAGvB,oBAAoB,CAACK,KAAK,CAACmB,GAAG,CAAC;IAEjD,IAAID,SAAS,CAACE,eAAe,KAAK,EAAE,EAAE;MACpClB,UAAU,CAACM,OAAO,GAAGU,SAAS,CAACE,eAAe;MAC9CjB,UAAU,CAACK,OAAO,GAAGU,SAAS,CAACG,UAAU;MACzCjB,oBAAoB,CAACI,OAAO,GAAGU,SAAS,CAACI,yBAAyB;MAElET,OAAO,CAACC,IAAI,CAAC,eAAe,EAAEZ,UAAU,CAACM,OAAO,CAAC;MACjDH,QAAQ,CAACZ,cAAc,CAACO,KAAK,CAACU,WAAW,CAAC,CAAC;MAC3CL,QAAQ,CAACX,kBAAkB,CAACwB,SAAS,CAACK,eAAe,CAAC,CAAC;MAEvDC,UAAU,CAAC,MAAM;QACfX,OAAO,CAACC,IAAI,CAAC,qCAAqC,CAAC;QACnDE,IAAI,CAACE,SAAS,CAACO,aAAa,CAAC;MAC/B,CAAC,EAAE,IAAI,CAAC;IACV;EACF,CAAC,EAAE,CAACzB,KAAK,CAACU,WAAW,EAAEV,KAAK,CAACW,KAAK,EAAEX,KAAK,CAACY,aAAa,EAAEZ,KAAK,CAACmB,GAAG,CAAC,CAAC;EAEpE,oBACIrB,OAAA;IAAK4B,SAAS,EAAC,4BAA4B;IAAAC,QAAA,eACzC7B,OAAA,CAACF,cAAc;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEZ,CAAC;AAAC9B,EAAA,CAjEIF,gBAA4B;EAAA,QAMfR,WAAW;AAAA;AAAAyC,EAAA,GANxBjC,gBAA4B;AAmElC,eAAeA,gBAAgB;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}