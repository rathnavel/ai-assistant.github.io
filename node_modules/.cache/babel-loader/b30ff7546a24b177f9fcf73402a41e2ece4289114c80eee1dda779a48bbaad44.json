{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n// Define the state interface\n\n// Initial state\nconst initialState = {\n  wellnessBreakData: [],\n  loading: false\n};\n\n// Create the slice\nexport const WellnessBreakSlice = createSlice({\n  name: \"wellnessbreak\",\n  initialState,\n  reducers: {\n    // Action to remove wellness break data\n    removeWellnessBreakData: state => {\n      console.log(\"Removing wellness break data from store\");\n      state.wellnessBreakData = [];\n      state.loading = false;\n    },\n    // Action to add wellness break data\n    addWellnessBreakData: (state, action) => {\n      console.log(\"Adding wellness break data to store\", action.payload);\n      state.wellnessBreakData.push(action.payload);\n      state.loading = false;\n    },\n    // Action to update wellness break data\n    updateWellnessBreakDataActionable: (state, action) => {\n      console.log(\"Updating wellness break data in store\", action.payload);\n      const index = state.wellnessBreakData.findIndex(item => item.interactionDateTime === action.payload.interactionDateTime);\n      if (index !== -1) {\n        state.wellnessBreakData[index] = {\n          ...state.wellnessBreakData[index],\n          content: {\n            ...state.wellnessBreakData[index].content,\n            actionable: action.payload.content.actionable,\n            response: action.payload.content.response,\n            agentEngaged: action.payload.content.agentEngaged,\n            error: action.payload.content.error\n          }\n        };\n      }\n      state.loading = false;\n    }\n  }\n});\n\n// Export actions and reducer\nexport const {\n  addWellnessBreakData,\n  removeWellnessBreakData,\n  updateWellnessBreakDataActionable\n} = WellnessBreakSlice.actions;\nexport default WellnessBreakSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","wellnessBreakData","loading","WellnessBreakSlice","name","reducers","removeWellnessBreakData","state","console","log","addWellnessBreakData","action","payload","push","updateWellnessBreakDataActionable","index","findIndex","item","interactionDateTime","content","actionable","response","agentEngaged","error","actions","reducer"],"sources":["/Users/ratbalas/Documents/Projects/temp/ai-assistant.github.io/src/APIIntegrations/WellnessBreaks.ts"],"sourcesContent":["import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { WellnessBreak } from \"./types\";\n\n// Define the state interface\ninterface WellnessBreakState {\n  wellnessBreakData: WellnessBreak[];\n  loading: boolean;\n}\n\n// Initial state\nconst initialState: WellnessBreakState = {\n  wellnessBreakData: [],\n  loading: false\n};\n\n// Create the slice\nexport const WellnessBreakSlice = createSlice({\n  name: \"wellnessbreak\",\n  initialState,\n  reducers: {\n    // Action to remove wellness break data\n    removeWellnessBreakData: (state: WellnessBreakState): void => {\n      console.log(\"Removing wellness break data from store\");\n      state.wellnessBreakData = [];\n      state.loading = false;\n    },\n    // Action to add wellness break data\n    addWellnessBreakData: (state: WellnessBreakState, action: PayloadAction<WellnessBreak>): void => {\n      console.log(\"Adding wellness break data to store\", action.payload);\n      state.wellnessBreakData.push(action.payload);\n      state.loading = false;\n    },\n    // Action to update wellness break data\n    updateWellnessBreakDataActionable: (state: WellnessBreakState, action: PayloadAction<WellnessBreak>): void => {\n      console.log(\"Updating wellness break data in store\", action.payload);\n      const index = state.wellnessBreakData.findIndex((item) => item.interactionDateTime === action.payload.interactionDateTime);\n      if (index !== -1) {\n        state.wellnessBreakData[index] = {\n          ...state.wellnessBreakData[index],\n          content: {\n            ...state.wellnessBreakData[index].content,\n            actionable: action.payload.content.actionable,\n            response: action.payload.content.response,\n            agentEngaged: action.payload.content.agentEngaged,\n            error: action.payload.content.error\n          }\n        };\n      }\n      state.loading = false;\n    }\n  }\n});\n\n// Export actions and reducer\nexport const { addWellnessBreakData, removeWellnessBreakData, updateWellnessBreakDataActionable } = WellnessBreakSlice.actions;\nexport default WellnessBreakSlice.reducer;\n\n"],"mappings":"AAAA,SAAwBA,WAAW,QAAQ,kBAAkB;;AAG7D;;AAMA;AACA,MAAMC,YAAgC,GAAG;EACvCC,iBAAiB,EAAE,EAAE;EACrBC,OAAO,EAAE;AACX,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAGJ,WAAW,CAAC;EAC5CK,IAAI,EAAE,eAAe;EACrBJ,YAAY;EACZK,QAAQ,EAAE;IACR;IACAC,uBAAuB,EAAGC,KAAyB,IAAW;MAC5DC,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;MACtDF,KAAK,CAACN,iBAAiB,GAAG,EAAE;MAC5BM,KAAK,CAACL,OAAO,GAAG,KAAK;IACvB,CAAC;IACD;IACAQ,oBAAoB,EAAEA,CAACH,KAAyB,EAAEI,MAAoC,KAAW;MAC/FH,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEE,MAAM,CAACC,OAAO,CAAC;MAClEL,KAAK,CAACN,iBAAiB,CAACY,IAAI,CAACF,MAAM,CAACC,OAAO,CAAC;MAC5CL,KAAK,CAACL,OAAO,GAAG,KAAK;IACvB,CAAC;IACD;IACAY,iCAAiC,EAAEA,CAACP,KAAyB,EAAEI,MAAoC,KAAW;MAC5GH,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEE,MAAM,CAACC,OAAO,CAAC;MACpE,MAAMG,KAAK,GAAGR,KAAK,CAACN,iBAAiB,CAACe,SAAS,CAAEC,IAAI,IAAKA,IAAI,CAACC,mBAAmB,KAAKP,MAAM,CAACC,OAAO,CAACM,mBAAmB,CAAC;MAC1H,IAAIH,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBR,KAAK,CAACN,iBAAiB,CAACc,KAAK,CAAC,GAAG;UAC/B,GAAGR,KAAK,CAACN,iBAAiB,CAACc,KAAK,CAAC;UACjCI,OAAO,EAAE;YACP,GAAGZ,KAAK,CAACN,iBAAiB,CAACc,KAAK,CAAC,CAACI,OAAO;YACzCC,UAAU,EAAET,MAAM,CAACC,OAAO,CAACO,OAAO,CAACC,UAAU;YAC7CC,QAAQ,EAAEV,MAAM,CAACC,OAAO,CAACO,OAAO,CAACE,QAAQ;YACzCC,YAAY,EAAEX,MAAM,CAACC,OAAO,CAACO,OAAO,CAACG,YAAY;YACjDC,KAAK,EAAEZ,MAAM,CAACC,OAAO,CAACO,OAAO,CAACI;UAChC;QACF,CAAC;MACH;MACAhB,KAAK,CAACL,OAAO,GAAG,KAAK;IACvB;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEQ,oBAAoB;EAAEJ,uBAAuB;EAAEQ;AAAkC,CAAC,GAAGX,kBAAkB,CAACqB,OAAO;AAC9H,eAAerB,kBAAkB,CAACsB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}