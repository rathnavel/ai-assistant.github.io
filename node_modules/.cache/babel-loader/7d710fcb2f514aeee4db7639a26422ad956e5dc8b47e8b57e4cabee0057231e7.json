{"ast":null,"code":"import { AiInsightClient } from \"../proto/serving_grpc_web_pb.js\";\nimport { InsightsServingRequest } from \"../proto/serving_pb.js\";\n/**\n * gRPC Channel creation and fetch response\n * @param {String} url\n * @param {String} bearerAuthToken\n * @param {String} activeCallId\n * @param {String} orgId\n */\n\nexport async function fetchGrpcData(url, authToken, activeCallId, orgId) {\n  console.log(`Creating channel for conversationId: ${activeCallId}`);\n  const bearerAuthToken = \"Bearer \" + authToken;\n  const client = new AiInsightClient(url, null, null);\n  const insightsServingRequest = new InsightsServingRequest();\n  insightsServingRequest.setConversationid(activeCallId);\n  insightsServingRequest.setMessageid(\"virtual-agent-call-summary\");\n  insightsServingRequest.setInsighttype(5);\n  insightsServingRequest.setOrgid(orgId);\n  console.log(\"Insightrequest\", insightsServingRequest);\n  const request = insightsServingRequest.toObject(true);\n  console.log(\"Insightrequest\", request);\n  console.log(\"Bearer token\", bearerAuthToken);\n  try {\n    const response = await new Promise((resolve, reject) => {\n      client.insightServing(insightsServingRequest, {\n        authorization: bearerAuthToken\n      }, (err, response) => {\n        if (err) {\n          reject(err instanceof Error ? err : new Error(err.toString()));\n        } else {\n          resolve(response);\n        }\n      });\n    });\n    console.log(\"Response:\", response);\n    const insightServingResponse = response;\n    const responseObj = insightServingResponse.toObject(true);\n    let content = getContent(responseObj);\n    let res = {\n      summary: content,\n      interactionDateTime: getTimeStamp(responseObj),\n      error: null\n    };\n    console.log(\"Response from grpc - \", content);\n    return res;\n  } catch (err) {\n    console.log(\"Error in creating grpc connection\", err);\n    let res = {\n      summary: null,\n      interactionDateTime: \"\",\n      error: err.message\n    };\n    return res;\n  }\n}\nexport const getContent = data => {\n  console.log(\"VAH data from grpc \", data);\n  let responseList = data[\"responsecontentList\"];\n  let callinsightsresult = responseList[0][\"callinsightsresult\"];\n  let content = callinsightsresult[\"content\"];\n  let content_parse = JSON.parse(content);\n  console.log(\"VAH content parse \", content_parse);\n  return content_parse;\n};\nexport const getTimeStamp = data => {\n  let responseList = data[\"starttimestamp\"];\n  let dateTime = new Date(responseList).toString();\n  console.log(\"VAH dateTime  \", dateTime);\n  return dateTime;\n};","map":{"version":3,"names":["AiInsightClient","InsightsServingRequest","fetchGrpcData","url","authToken","activeCallId","orgId","console","log","bearerAuthToken","client","insightsServingRequest","setConversationid","setMessageid","setInsighttype","setOrgid","request","toObject","response","Promise","resolve","reject","insightServing","authorization","err","Error","toString","insightServingResponse","responseObj","content","getContent","res","summary","interactionDateTime","getTimeStamp","error","message","data","responseList","callinsightsresult","content_parse","JSON","parse","dateTime","Date"],"sources":["/Users/ratbalas/Documents/Projects/temp/ai-assistant.github.io/src/gRPCClient/index.ts"],"sourcesContent":["import { AiInsightClient } from \"../proto/serving_grpc_web_pb.js\";\nimport { InsightsServingRequest, InsightServingResponse } from \"../proto/serving_pb.js\";\nimport { VASResponse } from \"../APIIntegrations/types\";\n\n/**\n * gRPC Channel creation and fetch response\n * @param {String} url\n * @param {String} bearerAuthToken\n * @param {String} activeCallId\n * @param {String} orgId\n */\n\nexport async function fetchGrpcData(url: string, authToken: string, activeCallId: string, orgId: string): Promise<VASResponse> {\n  console.log(`Creating channel for conversationId: ${activeCallId}`);\n  const bearerAuthToken = \"Bearer \" + authToken;\n  const client = new AiInsightClient(url, null, null);\n  const insightsServingRequest = new InsightsServingRequest();\n\n  insightsServingRequest.setConversationid(activeCallId);\n  insightsServingRequest.setMessageid(\"virtual-agent-call-summary\");\n  insightsServingRequest.setInsighttype(5);\n  insightsServingRequest.setOrgid(orgId);\n\n  console.log(\"Insightrequest\", insightsServingRequest);\n  const request = insightsServingRequest.toObject(true);\n  console.log(\"Insightrequest\", request);\n  console.log(\"Bearer token\", bearerAuthToken);\n\n  try {\n    const response = await new Promise<InsightServingResponse>((resolve, reject) => {\n      client.insightServing(insightsServingRequest, { authorization: bearerAuthToken }, (err, response) => {\n        if (err) {\n          reject(err instanceof Error ? err : new Error(err.toString()));\n        } else {\n          resolve(response);\n        }\n      });\n    });\n\n    console.log(\"Response:\", response);\n    const insightServingResponse = response;\n    const responseObj = insightServingResponse.toObject(true);\n    let content = getContent(responseObj);\n    let res: VASResponse = {\n      summary: content,\n      interactionDateTime: getTimeStamp(responseObj),\n      error: null\n    };\n    console.log(\"Response from grpc - \", content);\n    return res;\n  } catch (err: any) {\n    console.log(\"Error in creating grpc connection\", err);\n    let res: VASResponse = {\n      summary: null,\n      interactionDateTime: \"\",\n      error: err.message\n    };\n    return res;\n  }\n}\nexport const getContent = (data: any) => {\n  console.log(\"VAH data from grpc \", data);\n  let responseList = data[\"responsecontentList\"];\n  let callinsightsresult = responseList[0][\"callinsightsresult\"];\n  let content = callinsightsresult[\"content\"];\n  let content_parse = JSON.parse(content);\n  console.log(\"VAH content parse \", content_parse);\n\n  return content_parse;\n};\n\nexport const getTimeStamp = (data: any) => {\n  let responseList = data[\"starttimestamp\"];\n  let dateTime = new Date(responseList).toString();\n  console.log(\"VAH dateTime  \", dateTime);\n  return dateTime;\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}