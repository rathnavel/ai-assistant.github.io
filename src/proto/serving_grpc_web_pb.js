/**
 * @fileoverview gRPC-Web generated client stub for com.cisco.wcc.ccai.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.20.0
// source: serving.proto

/* eslint-disable */
// @ts-nocheck

const grpc = {};
grpc.web = require("grpc-web");

var messages_pb = require("./messages_pb.js");

var suggestions_pb = require("./suggestions_pb.js");

var recognize_pb = require("./recognize_pb.js");

var virtualagent_pb = require("./virtualagent_pb.js");
const proto = {};
proto.com = {};
proto.com.cisco = {};
proto.com.cisco.wcc = {};
proto.com.cisco.wcc.ccai = {};
proto.com.cisco.wcc.ccai.v1 = require("./serving_pb.js");

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.com.cisco.wcc.ccai.v1.AiInsightClient = function (
  hostname,
  credentials,
  options
) {
  if (!options) options = {};
  options.format = "text";

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, "");
};

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.com.cisco.wcc.ccai.v1.AiInsightPromiseClient = function (
  hostname,
  credentials,
  options
) {
  if (!options) options = {};
  options.format = "text";

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, "");
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.com.cisco.wcc.ccai.v1.StreamingInsightServingRequest,
 *   !proto.com.cisco.wcc.ccai.v1.StreamingInsightServingResponse>}
 */
const methodDescriptor_AiInsight_StreamingInsightServing =
  new grpc.web.MethodDescriptor(
    "/com.cisco.wcc.ccai.v1.AiInsight/StreamingInsightServing",
    grpc.web.MethodType.SERVER_STREAMING,
    proto.com.cisco.wcc.ccai.v1.StreamingInsightServingRequest,
    proto.com.cisco.wcc.ccai.v1.StreamingInsightServingResponse,
    /**
     * @param {!proto.com.cisco.wcc.ccai.v1.StreamingInsightServingRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.com.cisco.wcc.ccai.v1.StreamingInsightServingResponse.deserializeBinary
  );

/**
 * @param {!proto.com.cisco.wcc.ccai.v1.StreamingInsightServingRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.com.cisco.wcc.ccai.v1.StreamingInsightServingResponse>}
 *     The XHR Node Readable Stream
 */
proto.com.cisco.wcc.ccai.v1.AiInsightClient.prototype.streamingInsightServing =
  function (request, metadata) {
    return this.client_.serverStreaming(
      this.hostname_ +
        "/com.cisco.wcc.ccai.v1.AiInsight/StreamingInsightServing",
      request,
      metadata || {},
      methodDescriptor_AiInsight_StreamingInsightServing
    );
  };

/**
 * @param {!proto.com.cisco.wcc.ccai.v1.StreamingInsightServingRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.com.cisco.wcc.ccai.v1.StreamingInsightServingResponse>}
 *     The XHR Node Readable Stream
 */
proto.com.cisco.wcc.ccai.v1.AiInsightPromiseClient.prototype.streamingInsightServing =
  function (request, metadata) {
    return this.client_.serverStreaming(
      this.hostname_ +
        "/com.cisco.wcc.ccai.v1.AiInsight/StreamingInsightServing",
      request,
      metadata || {},
      methodDescriptor_AiInsight_StreamingInsightServing
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.com.cisco.wcc.ccai.v1.InsightsServingRequest,
 *   !proto.com.cisco.wcc.ccai.v1.InsightsServingResponse>}
 */
const methodDescriptor_AiInsight_InsightServing = new grpc.web.MethodDescriptor(
  "/com.cisco.wcc.ccai.v1.AiInsight/InsightServing",
  grpc.web.MethodType.UNARY,
  proto.com.cisco.wcc.ccai.v1.InsightsServingRequest,
  proto.com.cisco.wcc.ccai.v1.InsightsServingResponse,
  /**
   * @param {!proto.com.cisco.wcc.ccai.v1.InsightsServingRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.com.cisco.wcc.ccai.v1.InsightsServingResponse.deserializeBinary
);

/**
 * @param {!proto.com.cisco.wcc.ccai.v1.InsightsServingRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.com.cisco.wcc.ccai.v1.InsightsServingResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.com.cisco.wcc.ccai.v1.InsightsServingResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.com.cisco.wcc.ccai.v1.AiInsightClient.prototype.insightServing =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ + "/com.cisco.wcc.ccai.v1.AiInsight/InsightServing",
      request,
      metadata || {},
      methodDescriptor_AiInsight_InsightServing,
      callback
    );
  };

/**
 * @param {!proto.com.cisco.wcc.ccai.v1.InsightsServingRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.com.cisco.wcc.ccai.v1.InsightsServingResponse>}
 *     Promise that resolves to the response
 */
proto.com.cisco.wcc.ccai.v1.AiInsightPromiseClient.prototype.insightServing =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ + "/com.cisco.wcc.ccai.v1.AiInsight/InsightServing",
      request,
      metadata || {},
      methodDescriptor_AiInsight_InsightServing
    );
  };

module.exports = proto.com.cisco.wcc.ccai.v1;
