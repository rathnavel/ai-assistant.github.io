// source: callinsights.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require("google-protobuf");
var goog = jspb;
var global = function () {
  return this || window || global || self || Function("return this")();
}.call(null);

var google_rpc_status_pb = require("./google/rpc/status_pb.js");
goog.object.extend(proto, google_rpc_status_pb);
goog.exportSymbol("proto.CallSummary", null, global);
goog.exportSymbol("proto.CallTopic", null, global);
goog.exportSymbol("proto.Conversation", null, global);
goog.exportSymbol("proto.ConversationMessage", null, global);
goog.exportSymbol("proto.ConversationMessage.Role", null, global);
goog.exportSymbol("proto.EventType", null, global);
goog.exportSymbol("proto.GetInsightsRequest", null, global);
goog.exportSymbol("proto.GetInsightsResponse", null, global);
goog.exportSymbol("proto.GetInsightsResponse.CallinsightCase", null, global);
goog.exportSymbol("proto.InsightsConfig", null, global);
goog.exportSymbol("proto.InsightsConfig.AgentSentimentConfig", null, global);
goog.exportSymbol("proto.InsightsConfig.CustomerSentimentConfig", null, global);
goog.exportSymbol("proto.InsightsConfig.SummaryConfig", null, global);
goog.exportSymbol("proto.InsightsConfig.TopicConfig", null, global);
goog.exportSymbol("proto.Sentiment", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConversationMessage = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConversationMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConversationMessage.displayName = "proto.ConversationMessage";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Conversation = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.Conversation.repeatedFields_,
    null
  );
};
goog.inherits(proto.Conversation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Conversation.displayName = "proto.Conversation";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetInsightsRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetInsightsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetInsightsRequest.displayName = "proto.GetInsightsRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InsightsConfig = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.InsightsConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.InsightsConfig.displayName = "proto.InsightsConfig";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InsightsConfig.CustomerSentimentConfig = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.InsightsConfig.CustomerSentimentConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.InsightsConfig.CustomerSentimentConfig.displayName =
    "proto.InsightsConfig.CustomerSentimentConfig";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InsightsConfig.AgentSentimentConfig = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.InsightsConfig.AgentSentimentConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.InsightsConfig.AgentSentimentConfig.displayName =
    "proto.InsightsConfig.AgentSentimentConfig";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InsightsConfig.TopicConfig = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.InsightsConfig.TopicConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.InsightsConfig.TopicConfig.displayName =
    "proto.InsightsConfig.TopicConfig";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InsightsConfig.SummaryConfig = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.InsightsConfig.SummaryConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.InsightsConfig.SummaryConfig.displayName =
    "proto.InsightsConfig.SummaryConfig";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetInsightsResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    null,
    proto.GetInsightsResponse.oneofGroups_
  );
};
goog.inherits(proto.GetInsightsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetInsightsResponse.displayName = "proto.GetInsightsResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Sentiment = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Sentiment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Sentiment.displayName = "proto.Sentiment";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CallTopic = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CallTopic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CallTopic.displayName = "proto.CallTopic";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CallSummary = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CallSummary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CallSummary.displayName = "proto.CallSummary";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ConversationMessage.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.ConversationMessage.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ConversationMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ConversationMessage.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        role: jspb.Message.getFieldWithDefault(msg, 1, 0),
        startTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
        endTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
        languageCode: jspb.Message.getFieldWithDefault(msg, 4, ""),
        transcript: jspb.Message.getFieldWithDefault(msg, 5, ""),
        insightsMap: (f = msg.getInsightsMap())
          ? f.toObject(includeInstance, undefined)
          : [],
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConversationMessage}
 */
proto.ConversationMessage.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConversationMessage();
  return proto.ConversationMessage.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConversationMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConversationMessage}
 */
proto.ConversationMessage.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.ConversationMessage.Role} */ (
          reader.readEnum()
        );
        msg.setRole(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setStartTime(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setEndTime(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setLanguageCode(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setTranscript(value);
        break;
      case 6:
        var value = msg.getInsightsMap();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            "",
            ""
          );
        });
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConversationMessage.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.ConversationMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConversationMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConversationMessage.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getRole();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeInt64(3, f);
  }
  f = message.getLanguageCode();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getTranscript();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getInsightsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      6,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeString
    );
  }
};

/**
 * @enum {number}
 */
proto.ConversationMessage.Role = {
  ROLE_UNSPECIFIED: 0,
  VIRTUAL_AGENT: 1,
  CALLER: 2,
  AGENT: 3,
};

/**
 * optional Role role = 1;
 * @return {!proto.ConversationMessage.Role}
 */
proto.ConversationMessage.prototype.getRole = function () {
  return /** @type {!proto.ConversationMessage.Role} */ (
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};

/**
 * @param {!proto.ConversationMessage.Role} value
 * @return {!proto.ConversationMessage} returns this
 */
proto.ConversationMessage.prototype.setRole = function (value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};

/**
 * optional int64 start_time = 2;
 * @return {number}
 */
proto.ConversationMessage.prototype.getStartTime = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.ConversationMessage} returns this
 */
proto.ConversationMessage.prototype.setStartTime = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional int64 end_time = 3;
 * @return {number}
 */
proto.ConversationMessage.prototype.getEndTime = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.ConversationMessage} returns this
 */
proto.ConversationMessage.prototype.setEndTime = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional string language_code = 4;
 * @return {string}
 */
proto.ConversationMessage.prototype.getLanguageCode = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * @param {string} value
 * @return {!proto.ConversationMessage} returns this
 */
proto.ConversationMessage.prototype.setLanguageCode = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string transcript = 5;
 * @return {string}
 */
proto.ConversationMessage.prototype.getTranscript = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};

/**
 * @param {string} value
 * @return {!proto.ConversationMessage} returns this
 */
proto.ConversationMessage.prototype.setTranscript = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * map<string, string> insights = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.ConversationMessage.prototype.getInsightsMap = function (
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,string>} */ (
    jspb.Message.getMapField(this, 6, opt_noLazyCreate, null)
  );
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ConversationMessage} returns this
 */
proto.ConversationMessage.prototype.clearInsightsMap = function () {
  this.getInsightsMap().clear();
  return this;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Conversation.repeatedFields_ = [5];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Conversation.prototype.toObject = function (opt_includeInstance) {
    return proto.Conversation.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Conversation} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Conversation.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        conversationId: jspb.Message.getFieldWithDefault(msg, 1, ""),
        startTimestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
        endTimestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
        languageCode: jspb.Message.getFieldWithDefault(msg, 4, ""),
        messagesList: jspb.Message.toObjectList(
          msg.getMessagesList(),
          proto.ConversationMessage.toObject,
          includeInstance
        ),
        redacted: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Conversation}
 */
proto.Conversation.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Conversation();
  return proto.Conversation.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Conversation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Conversation}
 */
proto.Conversation.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setConversationId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setStartTimestamp(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setEndTimestamp(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setLanguageCode(value);
        break;
      case 5:
        var value = new proto.ConversationMessage();
        reader.readMessage(
          value,
          proto.ConversationMessage.deserializeBinaryFromReader
        );
        msg.addMessages(value);
        break;
      case 6:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setRedacted(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Conversation.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Conversation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Conversation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Conversation.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getConversationId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getStartTimestamp();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
  f = message.getEndTimestamp();
  if (f !== 0) {
    writer.writeInt64(3, f);
  }
  f = message.getLanguageCode();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ConversationMessage.serializeBinaryToWriter
    );
  }
  f = message.getRedacted();
  if (f) {
    writer.writeBool(6, f);
  }
};

/**
 * optional string conversation_id = 1;
 * @return {string}
 */
proto.Conversation.prototype.getConversationId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.Conversation} returns this
 */
proto.Conversation.prototype.setConversationId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional int64 start_timestamp = 2;
 * @return {number}
 */
proto.Conversation.prototype.getStartTimestamp = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.Conversation} returns this
 */
proto.Conversation.prototype.setStartTimestamp = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional int64 end_timestamp = 3;
 * @return {number}
 */
proto.Conversation.prototype.getEndTimestamp = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.Conversation} returns this
 */
proto.Conversation.prototype.setEndTimestamp = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional string language_code = 4;
 * @return {string}
 */
proto.Conversation.prototype.getLanguageCode = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * @param {string} value
 * @return {!proto.Conversation} returns this
 */
proto.Conversation.prototype.setLanguageCode = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * repeated ConversationMessage messages = 5;
 * @return {!Array<!proto.ConversationMessage>}
 */
proto.Conversation.prototype.getMessagesList = function () {
  return /** @type{!Array<!proto.ConversationMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ConversationMessage, 5)
  );
};

/**
 * @param {!Array<!proto.ConversationMessage>} value
 * @return {!proto.Conversation} returns this
 */
proto.Conversation.prototype.setMessagesList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};

/**
 * @param {!proto.ConversationMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ConversationMessage}
 */
proto.Conversation.prototype.addMessages = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    5,
    opt_value,
    proto.ConversationMessage,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Conversation} returns this
 */
proto.Conversation.prototype.clearMessagesList = function () {
  return this.setMessagesList([]);
};

/**
 * optional bool redacted = 6;
 * @return {boolean}
 */
proto.Conversation.prototype.getRedacted = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 6, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.Conversation} returns this
 */
proto.Conversation.prototype.setRedacted = function (value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.GetInsightsRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.GetInsightsRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.GetInsightsRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.GetInsightsRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        orgId: jspb.Message.getFieldWithDefault(msg, 1, ""),
        conversation:
          (f = msg.getConversation()) &&
          proto.Conversation.toObject(includeInstance, f),
        eventType: jspb.Message.getFieldWithDefault(msg, 3, 0),
        insightConfig:
          (f = msg.getInsightConfig()) &&
          proto.InsightsConfig.toObject(includeInstance, f),
        callContext: jspb.Message.getFieldWithDefault(msg, 5, ""),
        callAttributesMap: (f = msg.getCallAttributesMap())
          ? f.toObject(includeInstance, undefined)
          : [],
        requestTimestamp: jspb.Message.getFieldWithDefault(msg, 9, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetInsightsRequest}
 */
proto.GetInsightsRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetInsightsRequest();
  return proto.GetInsightsRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetInsightsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetInsightsRequest}
 */
proto.GetInsightsRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setOrgId(value);
        break;
      case 2:
        var value = new proto.Conversation();
        reader.readMessage(
          value,
          proto.Conversation.deserializeBinaryFromReader
        );
        msg.setConversation(value);
        break;
      case 3:
        var value = /** @type {!proto.EventType} */ (reader.readEnum());
        msg.setEventType(value);
        break;
      case 4:
        var value = new proto.InsightsConfig();
        reader.readMessage(
          value,
          proto.InsightsConfig.deserializeBinaryFromReader
        );
        msg.setInsightConfig(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setCallContext(value);
        break;
      case 6:
        var value = msg.getCallAttributesMap();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            "",
            ""
          );
        });
        break;
      case 9:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setRequestTimestamp(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetInsightsRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.GetInsightsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetInsightsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetInsightsRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getOrgId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getConversation();
  if (f != null) {
    writer.writeMessage(2, f, proto.Conversation.serializeBinaryToWriter);
  }
  f = message.getEventType();
  if (f !== 0.0) {
    writer.writeEnum(3, f);
  }
  f = message.getInsightConfig();
  if (f != null) {
    writer.writeMessage(4, f, proto.InsightsConfig.serializeBinaryToWriter);
  }
  f = message.getCallContext();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getCallAttributesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      6,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeString
    );
  }
  f = message.getRequestTimestamp();
  if (f !== 0) {
    writer.writeInt64(9, f);
  }
};

/**
 * optional string org_id = 1;
 * @return {string}
 */
proto.GetInsightsRequest.prototype.getOrgId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.GetInsightsRequest} returns this
 */
proto.GetInsightsRequest.prototype.setOrgId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional Conversation conversation = 2;
 * @return {?proto.Conversation}
 */
proto.GetInsightsRequest.prototype.getConversation = function () {
  return /** @type{?proto.Conversation} */ (
    jspb.Message.getWrapperField(this, proto.Conversation, 2)
  );
};

/**
 * @param {?proto.Conversation|undefined} value
 * @return {!proto.GetInsightsRequest} returns this
 */
proto.GetInsightsRequest.prototype.setConversation = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.GetInsightsRequest} returns this
 */
proto.GetInsightsRequest.prototype.clearConversation = function () {
  return this.setConversation(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GetInsightsRequest.prototype.hasConversation = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional EventType event_type = 3;
 * @return {!proto.EventType}
 */
proto.GetInsightsRequest.prototype.getEventType = function () {
  return /** @type {!proto.EventType} */ (
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};

/**
 * @param {!proto.EventType} value
 * @return {!proto.GetInsightsRequest} returns this
 */
proto.GetInsightsRequest.prototype.setEventType = function (value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};

/**
 * optional InsightsConfig insight_config = 4;
 * @return {?proto.InsightsConfig}
 */
proto.GetInsightsRequest.prototype.getInsightConfig = function () {
  return /** @type{?proto.InsightsConfig} */ (
    jspb.Message.getWrapperField(this, proto.InsightsConfig, 4)
  );
};

/**
 * @param {?proto.InsightsConfig|undefined} value
 * @return {!proto.GetInsightsRequest} returns this
 */
proto.GetInsightsRequest.prototype.setInsightConfig = function (value) {
  return jspb.Message.setWrapperField(this, 4, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.GetInsightsRequest} returns this
 */
proto.GetInsightsRequest.prototype.clearInsightConfig = function () {
  return this.setInsightConfig(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GetInsightsRequest.prototype.hasInsightConfig = function () {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * optional string call_context = 5;
 * @return {string}
 */
proto.GetInsightsRequest.prototype.getCallContext = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};

/**
 * @param {string} value
 * @return {!proto.GetInsightsRequest} returns this
 */
proto.GetInsightsRequest.prototype.setCallContext = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * map<string, string> call_attributes = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.GetInsightsRequest.prototype.getCallAttributesMap = function (
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,string>} */ (
    jspb.Message.getMapField(this, 6, opt_noLazyCreate, null)
  );
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.GetInsightsRequest} returns this
 */
proto.GetInsightsRequest.prototype.clearCallAttributesMap = function () {
  this.getCallAttributesMap().clear();
  return this;
};

/**
 * optional int64 request_timestamp = 9;
 * @return {number}
 */
proto.GetInsightsRequest.prototype.getRequestTimestamp = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};

/**
 * @param {number} value
 * @return {!proto.GetInsightsRequest} returns this
 */
proto.GetInsightsRequest.prototype.setRequestTimestamp = function (value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.InsightsConfig.prototype.toObject = function (opt_includeInstance) {
    return proto.InsightsConfig.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.InsightsConfig} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.InsightsConfig.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InsightsConfig}
 */
proto.InsightsConfig.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InsightsConfig();
  return proto.InsightsConfig.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InsightsConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InsightsConfig}
 */
proto.InsightsConfig.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InsightsConfig.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.InsightsConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InsightsConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InsightsConfig.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.InsightsConfig.CustomerSentimentConfig.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.InsightsConfig.CustomerSentimentConfig.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.InsightsConfig.CustomerSentimentConfig} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.InsightsConfig.CustomerSentimentConfig.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InsightsConfig.CustomerSentimentConfig}
 */
proto.InsightsConfig.CustomerSentimentConfig.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InsightsConfig.CustomerSentimentConfig();
  return proto.InsightsConfig.CustomerSentimentConfig.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InsightsConfig.CustomerSentimentConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InsightsConfig.CustomerSentimentConfig}
 */
proto.InsightsConfig.CustomerSentimentConfig.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InsightsConfig.CustomerSentimentConfig.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.InsightsConfig.CustomerSentimentConfig.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InsightsConfig.CustomerSentimentConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InsightsConfig.CustomerSentimentConfig.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.InsightsConfig.AgentSentimentConfig.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.InsightsConfig.AgentSentimentConfig.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.InsightsConfig.AgentSentimentConfig} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.InsightsConfig.AgentSentimentConfig.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InsightsConfig.AgentSentimentConfig}
 */
proto.InsightsConfig.AgentSentimentConfig.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InsightsConfig.AgentSentimentConfig();
  return proto.InsightsConfig.AgentSentimentConfig.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InsightsConfig.AgentSentimentConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InsightsConfig.AgentSentimentConfig}
 */
proto.InsightsConfig.AgentSentimentConfig.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InsightsConfig.AgentSentimentConfig.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.InsightsConfig.AgentSentimentConfig.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InsightsConfig.AgentSentimentConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InsightsConfig.AgentSentimentConfig.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.InsightsConfig.TopicConfig.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.InsightsConfig.TopicConfig.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.InsightsConfig.TopicConfig} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.InsightsConfig.TopicConfig.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InsightsConfig.TopicConfig}
 */
proto.InsightsConfig.TopicConfig.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InsightsConfig.TopicConfig();
  return proto.InsightsConfig.TopicConfig.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InsightsConfig.TopicConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InsightsConfig.TopicConfig}
 */
proto.InsightsConfig.TopicConfig.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InsightsConfig.TopicConfig.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.InsightsConfig.TopicConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InsightsConfig.TopicConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InsightsConfig.TopicConfig.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.InsightsConfig.SummaryConfig.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.InsightsConfig.SummaryConfig.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.InsightsConfig.SummaryConfig} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.InsightsConfig.SummaryConfig.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        length: jspb.Message.getFieldWithDefault(msg, 1, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InsightsConfig.SummaryConfig}
 */
proto.InsightsConfig.SummaryConfig.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InsightsConfig.SummaryConfig();
  return proto.InsightsConfig.SummaryConfig.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InsightsConfig.SummaryConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InsightsConfig.SummaryConfig}
 */
proto.InsightsConfig.SummaryConfig.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setLength(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InsightsConfig.SummaryConfig.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.InsightsConfig.SummaryConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InsightsConfig.SummaryConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InsightsConfig.SummaryConfig.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
};

/**
 * optional int32 length = 1;
 * @return {number}
 */
proto.InsightsConfig.SummaryConfig.prototype.getLength = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.InsightsConfig.SummaryConfig} returns this
 */
proto.InsightsConfig.SummaryConfig.prototype.setLength = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.GetInsightsResponse.oneofGroups_ = [[4, 5, 6, 7, 8]];

/**
 * @enum {number}
 */
proto.GetInsightsResponse.CallinsightCase = {
  CALLINSIGHT_NOT_SET: 0,
  CUSTOMER_SENTIMENT: 4,
  AGENT_SENTIMENT: 5,
  CALL_TOPIC: 6,
  CALL_SUMMARY: 7,
  ERROR_STATUS: 8,
};

/**
 * @return {proto.GetInsightsResponse.CallinsightCase}
 */
proto.GetInsightsResponse.prototype.getCallinsightCase = function () {
  return /** @type {proto.GetInsightsResponse.CallinsightCase} */ (
    jspb.Message.computeOneofCase(
      this,
      proto.GetInsightsResponse.oneofGroups_[0]
    )
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.GetInsightsResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.GetInsightsResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.GetInsightsResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.GetInsightsResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        orgId: jspb.Message.getFieldWithDefault(msg, 1, ""),
        conversationId: jspb.Message.getFieldWithDefault(msg, 2, ""),
        eventType: jspb.Message.getFieldWithDefault(msg, 3, 0),
        customerSentiment:
          (f = msg.getCustomerSentiment()) &&
          proto.Sentiment.toObject(includeInstance, f),
        agentSentiment:
          (f = msg.getAgentSentiment()) &&
          proto.Sentiment.toObject(includeInstance, f),
        callTopic:
          (f = msg.getCallTopic()) &&
          proto.CallTopic.toObject(includeInstance, f),
        callSummary:
          (f = msg.getCallSummary()) &&
          proto.CallSummary.toObject(includeInstance, f),
        errorStatus:
          (f = msg.getErrorStatus()) &&
          google_rpc_status_pb.Status.toObject(includeInstance, f),
        responseTimestamp: jspb.Message.getFieldWithDefault(msg, 9, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetInsightsResponse}
 */
proto.GetInsightsResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetInsightsResponse();
  return proto.GetInsightsResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetInsightsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetInsightsResponse}
 */
proto.GetInsightsResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setOrgId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setConversationId(value);
        break;
      case 3:
        var value = /** @type {!proto.EventType} */ (reader.readEnum());
        msg.setEventType(value);
        break;
      case 4:
        var value = new proto.Sentiment();
        reader.readMessage(value, proto.Sentiment.deserializeBinaryFromReader);
        msg.setCustomerSentiment(value);
        break;
      case 5:
        var value = new proto.Sentiment();
        reader.readMessage(value, proto.Sentiment.deserializeBinaryFromReader);
        msg.setAgentSentiment(value);
        break;
      case 6:
        var value = new proto.CallTopic();
        reader.readMessage(value, proto.CallTopic.deserializeBinaryFromReader);
        msg.setCallTopic(value);
        break;
      case 7:
        var value = new proto.CallSummary();
        reader.readMessage(
          value,
          proto.CallSummary.deserializeBinaryFromReader
        );
        msg.setCallSummary(value);
        break;
      case 8:
        var value = new google_rpc_status_pb.Status();
        reader.readMessage(
          value,
          google_rpc_status_pb.Status.deserializeBinaryFromReader
        );
        msg.setErrorStatus(value);
        break;
      case 9:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setResponseTimestamp(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetInsightsResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.GetInsightsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetInsightsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetInsightsResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getOrgId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getConversationId();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getEventType();
  if (f !== 0.0) {
    writer.writeEnum(3, f);
  }
  f = message.getCustomerSentiment();
  if (f != null) {
    writer.writeMessage(4, f, proto.Sentiment.serializeBinaryToWriter);
  }
  f = message.getAgentSentiment();
  if (f != null) {
    writer.writeMessage(5, f, proto.Sentiment.serializeBinaryToWriter);
  }
  f = message.getCallTopic();
  if (f != null) {
    writer.writeMessage(6, f, proto.CallTopic.serializeBinaryToWriter);
  }
  f = message.getCallSummary();
  if (f != null) {
    writer.writeMessage(7, f, proto.CallSummary.serializeBinaryToWriter);
  }
  f = message.getErrorStatus();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getResponseTimestamp();
  if (f !== 0) {
    writer.writeInt64(9, f);
  }
};

/**
 * optional string org_id = 1;
 * @return {string}
 */
proto.GetInsightsResponse.prototype.getOrgId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.GetInsightsResponse} returns this
 */
proto.GetInsightsResponse.prototype.setOrgId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string conversation_id = 2;
 * @return {string}
 */
proto.GetInsightsResponse.prototype.getConversationId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.GetInsightsResponse} returns this
 */
proto.GetInsightsResponse.prototype.setConversationId = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional EventType event_type = 3;
 * @return {!proto.EventType}
 */
proto.GetInsightsResponse.prototype.getEventType = function () {
  return /** @type {!proto.EventType} */ (
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};

/**
 * @param {!proto.EventType} value
 * @return {!proto.GetInsightsResponse} returns this
 */
proto.GetInsightsResponse.prototype.setEventType = function (value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};

/**
 * optional Sentiment customer_sentiment = 4;
 * @return {?proto.Sentiment}
 */
proto.GetInsightsResponse.prototype.getCustomerSentiment = function () {
  return /** @type{?proto.Sentiment} */ (
    jspb.Message.getWrapperField(this, proto.Sentiment, 4)
  );
};

/**
 * @param {?proto.Sentiment|undefined} value
 * @return {!proto.GetInsightsResponse} returns this
 */
proto.GetInsightsResponse.prototype.setCustomerSentiment = function (value) {
  return jspb.Message.setOneofWrapperField(
    this,
    4,
    proto.GetInsightsResponse.oneofGroups_[0],
    value
  );
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.GetInsightsResponse} returns this
 */
proto.GetInsightsResponse.prototype.clearCustomerSentiment = function () {
  return this.setCustomerSentiment(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GetInsightsResponse.prototype.hasCustomerSentiment = function () {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * optional Sentiment agent_sentiment = 5;
 * @return {?proto.Sentiment}
 */
proto.GetInsightsResponse.prototype.getAgentSentiment = function () {
  return /** @type{?proto.Sentiment} */ (
    jspb.Message.getWrapperField(this, proto.Sentiment, 5)
  );
};

/**
 * @param {?proto.Sentiment|undefined} value
 * @return {!proto.GetInsightsResponse} returns this
 */
proto.GetInsightsResponse.prototype.setAgentSentiment = function (value) {
  return jspb.Message.setOneofWrapperField(
    this,
    5,
    proto.GetInsightsResponse.oneofGroups_[0],
    value
  );
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.GetInsightsResponse} returns this
 */
proto.GetInsightsResponse.prototype.clearAgentSentiment = function () {
  return this.setAgentSentiment(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GetInsightsResponse.prototype.hasAgentSentiment = function () {
  return jspb.Message.getField(this, 5) != null;
};

/**
 * optional CallTopic call_topic = 6;
 * @return {?proto.CallTopic}
 */
proto.GetInsightsResponse.prototype.getCallTopic = function () {
  return /** @type{?proto.CallTopic} */ (
    jspb.Message.getWrapperField(this, proto.CallTopic, 6)
  );
};

/**
 * @param {?proto.CallTopic|undefined} value
 * @return {!proto.GetInsightsResponse} returns this
 */
proto.GetInsightsResponse.prototype.setCallTopic = function (value) {
  return jspb.Message.setOneofWrapperField(
    this,
    6,
    proto.GetInsightsResponse.oneofGroups_[0],
    value
  );
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.GetInsightsResponse} returns this
 */
proto.GetInsightsResponse.prototype.clearCallTopic = function () {
  return this.setCallTopic(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GetInsightsResponse.prototype.hasCallTopic = function () {
  return jspb.Message.getField(this, 6) != null;
};

/**
 * optional CallSummary call_summary = 7;
 * @return {?proto.CallSummary}
 */
proto.GetInsightsResponse.prototype.getCallSummary = function () {
  return /** @type{?proto.CallSummary} */ (
    jspb.Message.getWrapperField(this, proto.CallSummary, 7)
  );
};

/**
 * @param {?proto.CallSummary|undefined} value
 * @return {!proto.GetInsightsResponse} returns this
 */
proto.GetInsightsResponse.prototype.setCallSummary = function (value) {
  return jspb.Message.setOneofWrapperField(
    this,
    7,
    proto.GetInsightsResponse.oneofGroups_[0],
    value
  );
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.GetInsightsResponse} returns this
 */
proto.GetInsightsResponse.prototype.clearCallSummary = function () {
  return this.setCallSummary(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GetInsightsResponse.prototype.hasCallSummary = function () {
  return jspb.Message.getField(this, 7) != null;
};

/**
 * optional google.rpc.Status error_status = 8;
 * @return {?proto.google.rpc.Status}
 */
proto.GetInsightsResponse.prototype.getErrorStatus = function () {
  return /** @type{?proto.google.rpc.Status} */ (
    jspb.Message.getWrapperField(this, google_rpc_status_pb.Status, 8)
  );
};

/**
 * @param {?proto.google.rpc.Status|undefined} value
 * @return {!proto.GetInsightsResponse} returns this
 */
proto.GetInsightsResponse.prototype.setErrorStatus = function (value) {
  return jspb.Message.setOneofWrapperField(
    this,
    8,
    proto.GetInsightsResponse.oneofGroups_[0],
    value
  );
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.GetInsightsResponse} returns this
 */
proto.GetInsightsResponse.prototype.clearErrorStatus = function () {
  return this.setErrorStatus(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GetInsightsResponse.prototype.hasErrorStatus = function () {
  return jspb.Message.getField(this, 8) != null;
};

/**
 * optional int64 response_timestamp = 9;
 * @return {number}
 */
proto.GetInsightsResponse.prototype.getResponseTimestamp = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};

/**
 * @param {number} value
 * @return {!proto.GetInsightsResponse} returns this
 */
proto.GetInsightsResponse.prototype.setResponseTimestamp = function (value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Sentiment.prototype.toObject = function (opt_includeInstance) {
    return proto.Sentiment.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Sentiment} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Sentiment.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        score: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
        magnitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
        sentiment: jspb.Message.getFieldWithDefault(msg, 3, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Sentiment}
 */
proto.Sentiment.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Sentiment();
  return proto.Sentiment.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Sentiment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Sentiment}
 */
proto.Sentiment.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setScore(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setMagnitude(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setSentiment(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Sentiment.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Sentiment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Sentiment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Sentiment.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getScore();
  if (f !== 0.0) {
    writer.writeFloat(1, f);
  }
  f = message.getMagnitude();
  if (f !== 0.0) {
    writer.writeFloat(2, f);
  }
  f = message.getSentiment();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional float score = 1;
 * @return {number}
 */
proto.Sentiment.prototype.getScore = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.Sentiment} returns this
 */
proto.Sentiment.prototype.setScore = function (value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};

/**
 * optional float magnitude = 2;
 * @return {number}
 */
proto.Sentiment.prototype.getMagnitude = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.Sentiment} returns this
 */
proto.Sentiment.prototype.setMagnitude = function (value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};

/**
 * optional string sentiment = 3;
 * @return {string}
 */
proto.Sentiment.prototype.getSentiment = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.Sentiment} returns this
 */
proto.Sentiment.prototype.setSentiment = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.CallTopic.prototype.toObject = function (opt_includeInstance) {
    return proto.CallTopic.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.CallTopic} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.CallTopic.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CallTopic}
 */
proto.CallTopic.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CallTopic();
  return proto.CallTopic.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CallTopic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CallTopic}
 */
proto.CallTopic.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CallTopic.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.CallTopic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CallTopic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CallTopic.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.CallSummary.prototype.toObject = function (opt_includeInstance) {
    return proto.CallSummary.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.CallSummary} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.CallSummary.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        summary: jspb.Message.getFieldWithDefault(msg, 1, ""),
        summaryAttributesMap: (f = msg.getSummaryAttributesMap())
          ? f.toObject(includeInstance, undefined)
          : [],
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CallSummary}
 */
proto.CallSummary.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CallSummary();
  return proto.CallSummary.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CallSummary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CallSummary}
 */
proto.CallSummary.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setSummary(value);
        break;
      case 2:
        var value = msg.getSummaryAttributesMap();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            "",
            ""
          );
        });
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CallSummary.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.CallSummary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CallSummary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CallSummary.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSummary();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getSummaryAttributesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      2,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeString
    );
  }
};

/**
 * optional string summary = 1;
 * @return {string}
 */
proto.CallSummary.prototype.getSummary = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.CallSummary} returns this
 */
proto.CallSummary.prototype.setSummary = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * map<string, string> summary_attributes = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.CallSummary.prototype.getSummaryAttributesMap = function (
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,string>} */ (
    jspb.Message.getMapField(this, 2, opt_noLazyCreate, null)
  );
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.CallSummary} returns this
 */
proto.CallSummary.prototype.clearSummaryAttributesMap = function () {
  this.getSummaryAttributesMap().clear();
  return this;
};

/**
 * @enum {number}
 */
proto.EventType = {
  EVENT_TYPE_UNSPECIFIED: 0,
  VA_AGENT_TRANSFER: 1,
  AGENT_AGENT_TRANSFER: 2,
  CALL_END: 3,
  CALL_DROP: 4,
};

goog.object.extend(exports, proto);
