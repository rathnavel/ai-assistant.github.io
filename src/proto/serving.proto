/*
 This proto file contains the Serving API
 Service streaming gRPC calls for retrieving the streaming insights based on the conversation id
*/
syntax = "proto3";
option java_multiple_files = true;

package com.cisco.wcc.ccai.v1;

import "messages.proto";
import "suggestions.proto";
import "recognize.proto";
import "virtualagent.proto";


/*
 Service to subscribe to, to get AI Insights
*/
service AiInsight {

    /*
     Server side Streaming gRPC Call that produces streaming insights
     for a given conversation ID
    */
    rpc StreamingInsightServing(StreamingInsightServingRequest)
        returns (stream StreamingInsightServingResponse) {}
    
    rpc InsightServing(InsightsServingRequest)
        returns (InsightsServingResponse) {}
}

/*
 Represents the request for retrieving insights for a given conversation ID
*/
message StreamingInsightServingRequest{
    InsightServingRequest insightServingRequest = 1;
}

/*
 Represents the request content for retrieving AI Insights
*/
message InsightServingRequest{

    /*
        Required. Conversation ID for which insights are needed.
        The subscription will start listening to any insights for this conversation
        across multiple legs( IVR, Caller, Agent) and services (Transcription, Agent Assist)
    */
    string conversationId = 1;

    /*
        Required.Control Hub OrgID for the org, this conversation belongs to.
        The Access token should have authorization for this Org.
    */
    string orgId = 2;

    bool realTimeTranscripts = 3; // Is real time transcripts required? Default: false
    bool historicalTranscripts = 4; // Is historical transcripts from start of the conversation required? Default: false
    bool realtimeAgentAssist = 5; // Is real time agent assist required? Default: False
    bool historicalAgentAssist = 6; // Is historical agent assist from start of the conversation required? Default: false
    bool realTimeMessage = 7; // Is real time messages required? Default: false
    bool historicalMessage = 8; // Is historical messages from start of the conversation required? Default: false
    bool historicalVirtualAgent = 9; // Is virtual agent from start of the conversation required? Default: false

    /*
      Required. AgentDetails from where the call is initiated.
  */
    AgentDetails agentDetails  = 11;

    string messageId = 12; //Sets the message id for the request , this uniquely identifies each request .
}

message InsightsServingRequest{
    /*
      Required. Conversation ID (in combination with the messageId, if provided)for which insights are needed.
      The subscription will start listening to any insights for this conversation (along with messageId if provided)
      across multiple legs( IVR, Caller, Agent) and services (Transcription, Agent Assist)
  */
    string conversationId = 1;

    /*
      Optional. if messageId is provided then the insights are fetched with the combination of conversationId.
      The subscription will start listening to any insights for this messageID along with the conversationId field
      across multiple legs( IVR, Caller, Agent) and services (Transcription, Agent Assist)
    */
    string messageId=2;

    /*
        Required.Control Hub OrgID for the org, this conversation belongs to.
        The Access token should have authorization for this Org.
    */
    string orgId = 3;

    // Type of service this Insight request belongs to
    enum InsightType {
        DEFAULT_TRANSCRIPTION =  0;
        AGENT_ANSWERS       =   1;
        TRANSCRIPTION         =   2;
        VIRTUAL_AGENT = 3;
        MESSAGE = 4;
        CALL_INSIGHTS = 5;
    }

    InsightType insightType = 4;
}

message InsightsServingResponse{
    /*
      Required. Conversation ID (in combination with the messageId, if provided)for which insights are needed.
      The subscription will start listening to any insights for this conversation (along with messageId if provided)
      across multiple legs( IVR, Caller, Agent) and services (Transcription, Agent Assist)
  */
    string conversationId = 1;

    /*
      Optional. if messageId is provided then the insights are fetched with the combination of conversationId.
      The subscription will start listening to any insights for this messageID along with the conversationId field
      across multiple legs( IVR, Caller, Agent) and services (Transcription, Agent Assist)
    */
    string messageId=2;

    /*
        Required.Control Hub OrgID for the org, this conversation belongs to.
        The Access token should have authorization for this Org.
    */
    string orgId = 3;


    /*
      Start time and end time corresponds to the speech interval
      to which this insight belongs. Epoch Timestamp.
      These are optional fields, not always available
     */
    int64 startTimestamp = 4;
    int64 endTimestamp = 5;

    string configId = 6;
    string languageCode = 7;

    // Provider List for Services
    enum ServiceProvider {
        DEFAULT         =  0;
        CISCO            =   1;
        GOOGLE            =  2;
        NUANCE            = 3;
    }

    //Service Provider who produced this insight.
    ServiceProvider insightProvider = 8;

    //Content of the insight. This will vary based on the type of insight
    repeated ResponseContent responseContent = 9;
}

/*
 Response returned with Insights. There would be multiple messages in the stream.
 Each service type may have zero or more messages
*/
message StreamingInsightServingResponse{
    InsightServingResponse insightServingResponse = 1;
}


message AgentDetails{
    string agentId = 1;
}
/*
 Represents the insight serving response
*/

message InsightServingResponse{

    //Org Identifier (control hub) for which the insights need to be delivered
    string orgId = 1;

    //Identifier for the Conversation. Equivalent to Call ID, CallGUID etc.
    string conversationId = 2;

    //Identifier for the individual leg, based on the party. GUID
    string roleId = 3;

    /**
    * Identifier for a given utterance. The same utterance ID will be published
    * for the transcript utterance and the insights generated from it
    */
    string utteranceId=4;

    //Identifier for the party.
    enum Role {
        IVR=0;
        CALLER=1;
        AGENT=2;
    }

    //Role specifying IVR, Caller or Agent
    Role role = 5;

    // Type of service this Insight belongs to
    enum ServiceType {
        DEFAULT_TRANSCRIPTION =  0;
        AGENT_ANSWERS       =   1;
        TRANSCRIPTION         =   2;
        VIRTUAL_AGENT = 3;
        MESSAGE = 4;
        CALL_INSIGHTS = 5;
    }

    // Type of insight : ASR, Agent Assist etc.
    ServiceType insightType = 6;

    // Provider List for Services
    enum ServiceProvider {
        DEFAULT         =  0;
        CISCO            =   1;
        GOOGLE            =  2;
        NUANCE            = 3;
    }

    //Service Provider who produced this insight.
    ServiceProvider insightProvider = 7;

    /*
     Epoch Timestamp when this insight record was created/published.
     This field is always available, can be used for sorting messages by time.
    */
    int64 publishTimestamp = 8;

    /*
     Start time and end time corresponds to the speech interval
     to which this insight belongs. Epoch Timestamp.
     These are optional fields, not always available
    */
    int64 startTimestamp = 9;
    int64 endTimestamp = 10;

    /*
     Whether the insight is final or intermediate. Intermediate results will be
     overridden by the final result that follows them.
    */
    bool isFinal = 11;

    //message id
    string messageId=13;
    string configId = 14;
    string languageCode = 15;

    //Content of the insight. This will vary based on the type of insight
    ResponseContent responseContent = 12;
}

/*
 Represents the response content message
*/
message ResponseContent {
    //One of the available types.
    oneof stream_response_content {
        //Placeholder for any other types. Not returned unless stated
        string rawContent= 1;
        //For Service Type = TRANSCRIPTION
        StreamingRecognitionResult  recognitionResult = 2 ;
        //For Service Type = AGENT_ANSWERS
        AgentAnswer agentAnswerResult = 3;
        //For Service Type = MESSAGE
        Message messageResult = 4;
        // For Service Type = VIRTUAL_AGENT
        NLU virtualAgentResult  = 5;
        // For Service Type = CALL_INSIGHTS
        CallInsightsResult callInsightsResult = 6;
    }
}